{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to the Electronic Workbook (EWB)","text":"<p>This EWB provides the step-by-step instructions to complete the AusCERT 2024 Security in an (Unmanaged) Azure Environment - A Practical Example workshop.</p>"},{"location":"#synopsis","title":"Synopsis","text":"<p>We've all been there. A team is lured by a shiny gadget or tool that promises to - and maybe actually does! - improve business outcomes and user satisfaction  while reducing cost, development time, and integration headaches, and so boldy forges ahead! So it is with the fictional organization that is at the heart of this workshop, where a group of developers have started building out Azure Microsoft Entra ID applications but haven't followed the organization's technical review or change control processes. And as a result, have potentially introduced operational and security issues into the production environment.</p> <p>In this workshop, we'll take on the role of a security architect that has been tasked with examining this unmanaged Azure environment by replicating and probing the environment for security issues, so that we can demonstrate security issues to the over-zealous developers and bring them back into the fold.</p>"},{"location":"#scenario","title":"Scenario","text":"<p>You are a security architect employed by Tyrell Corporation, a large multi-national organization. Tyrell Corp has embraced a multi-cloud cloud service provider (CSP) vendor strategy using AWS for customer-facing marketing and ordering, tracking, and delivery services; Microsoft Entra ID for on-premises infrastructure; and M365 subscriptions for employees to access Exchange Online, OneDrive, and other collaboration tools.</p> <p>Company executives embrace Microsoft products for their ease of use, and Microsoft Entra ID has been deeply integrated into the on-premises data center and remote offices. The CIO, CTO, and VP of Engineering have been pushing to take advantage of Tyrell Corp's existing Azure account and use the Microsoft Identity platform to synchronize with the existing corporate Microsoft Entra ID. Executives also want to investigate potential new applications in Azure.</p> <p>For these reasons, some developers have started building test Azure Microsoft Entra ID applications. However, the developers have not followed technical review or change control policies, and as a result there has not been any oversight involving the Information Security team. The CISO has ordered a security review into some of the recent development work and operational changes within the Azure environment, and has asked for recommendations on improved detection and logging capabilities within the Azure environment.</p> <p>You have been assigned the task of generating a test environment that replicates key aspects of Tyrell Corp's Microsoft Entra ID environment, exploring it for potential security issues, and reporting your findings.</p> <p>So that you can perform that task -- and as a trusted Security Architect and Engineer -- you have been granted the Global Administrator role in an Azure account. This grants you the ability to create and manage a new subscription, and access to all administrative features within the subscription's associated tenant.<sup>1</sup><sup>,</sup><sup>2</sup><sup>,</sup><sup>3</sup></p>"},{"location":"#labs","title":"Labs","text":"<p>The workshop is broken up into a series of 'mini labs' designed to take you through key activities: </p> <ul> <li>Azure Account Setup: Creating or accessing an Azure account and creating a subscription.</li> <li>Azure Environment Setup: Creating a test environment using PurpleCloud and Terraform.</li> <li>Manual Reconnaissance: Performing manual reconnaisance on the environment to identify service principals with excessive privileges.</li> <li>Privilege Escalation: Leveraging discovered service principals to escalate to Global Administrator, to demonstrate the security weakness.</li> <li>Teardown: Tearing down the test environment using Terraform and manual clean-up.</li> </ul>"},{"location":"#requirements","title":"Requirements","text":"<p>To execute the workshop steps yourself, you'll need:</p> <ul> <li> <p>A laptop or computer that is able to access the Internet, specifically Azure cloud services.</p> </li> <li> <p>Either:</p> <ul> <li>Access to an Azure account that you are willing to use to create, configure, and tear down an Azure subscription; or</li> <li>An email address not already associated with an Azure account, and willingness to follow the EWB instructions to set up an Azure account and subscription for that email address.</li> </ul> </li> </ul>"},{"location":"#caveats-disclaimers-and-alarums","title":"Caveats, Disclaimers, and Alarums","text":"The Ever-Changing Web <p>These instructions were successfully tested on 2024.05.15. That said, things are always changing on the Web. Some prompts or visual elements may be slightly different than are presented here, so you may have to make some minor adjustments on the fly. But the labs' step-by-step instructions should be sufficient to get you there!</p> <p>As one specific example: While Microsoft has renamed Azure Active Directory (AAD) to Microsoft Entra ID, some tools and resources - including some that we use and reference in these labs - still reference AAD. Some of those tools and resources will be updated over time to reference Entra ID, and you may notice those changes as you work through the labs.</p> Browser Support <p>You should be able to use any standard web browser. The Step-by-Step Instructions for all the workshop's labs have been tested in Google Chrome, Microsoft Edge, and Firefox; most of the screenshots are from Chrome and Firefox.</p>"},{"location":"#getting-started","title":"Getting Started!","text":"<p>To get started, continue to the Azure Account Setup lab!</p> <p>Credits</p> <p>This workshop is based on a series of bonus labs from the SANS course SEC530: Defensible Security Architecture and Engineering: Implementing Zero Trust for the Hybrid Enterprise.<sup>4</sup> Those labs were in turn based on a SANS blog post by Jason Ostrom,<sup>5</sup> and uses Jason's PurpleCloud tool.<sup>6</sup></p> <ol> <li> <p>Microsoft. (2024, March 15). Azure roles, Azure AD roles, and classic subscription administrator roles. Microsoft Learn. Retrieved May 17, 2024 from https://learn.microsoft.com/en-us/azure/role-based-access-control/rbac-and-directory-admin-roles.\u00a0\u21a9</p> </li> <li> <p>Microsoft. (2024, April 29). Azure AD built-in roles. Microsoft Learn. Retrieved May 17, 2024 from https://learn.microsoft.com/en-us/azure/active-directory/roles/permissions-reference.\u00a0\u21a9</p> </li> <li> <p>Microsoft. (2024, April 29). Azure AD built-in roles: Global Administrator. Microsoft Learn. Retrieved May 17, 2024 from https://docs.microsoft.com/en-us/azure/active-directory/roles/permissions-reference#global-administrator.\u00a0\u21a9</p> </li> <li> <p>SANS Institute. (n.d.) SEC530: Defensible Security Architecture and Engineering: Implementing Zero Trust for the Hybrid Enterprise. SANS. Retrieved May 18, 2024 from https://www.sans.org/cyber-security-courses/defensible-security-architecture-and-engineering/.\u00a0\u21a9</p> </li> <li> <p>Ostrom, Jason. (2021, June 3). Build, Hack, and Defend Azure Identity - An Introduction to PurpleCloud Hybrid + Identity Cyber Range PurpleCloud is a Hybrid + Identity Cyber Security Range built for Azure Cloud with automated deployment scripts. SANS. Retrieved May 18, 2024 from https://www.sans.org/blog/build-hack-defend-azure-identity/.\u00a0\u21a9</p> </li> <li> <p>Ostrom, Jason. (2024, February 18; commit ec010a6a8b0979f2b63e909b3662ce557cc57615). PurpleCloud. Retrieved May 18, 2024 from https://github.com/iknowjason/PurpleCloud.\u00a0\u21a9</p> </li> </ol>"},{"location":"contact/","title":"Contact Info","text":""},{"location":"contact/#greg-scheidel","title":"Greg Scheidel","text":"<p>Email | scheidelg@gmail.com</p> <p>Twitter | @Greg_Scheidel</p>"},{"location":"contact/#affiliations","title":"Affiliations","text":"<p>SANS Institute | SANS Certified Instructor</p> <p>ECS | Chief Cybersecurity Officer, Cyber Division</p>"},{"location":"contact/#bio","title":"Bio","text":"<p>Greg Scheidel has over 25 years of hands-on experience in IT including desktop and server support, network design and implementation, application development and programming, IT service management, IT security, and information assurance. He currently leads a security program providing a full range of IT security services including SOC, incident management, risk management, penetration testing, forensic and malware analysis, cyber threat intelligence, security engineering, audit and policy SMEs. Greg firmly believes IT and security must serve business needs rather than exist for their own sake, and is passionate about teaching others while expanding and honing his own skills.</p> <p>Greg holds over 30 certifications across IT, ITSM, and IT security and for his own amusement obtains certifications directly meeting every 8507.01 role (two roles to go).</p>"},{"location":"info/","title":"Additional Info","text":""},{"location":"info/#credits","title":"Credits","text":"<p>As noted on the EWB home page, this workshop is based on a series of bonus labs from the SANS course SEC530: Defensible Security Architecture and Engineering: Implementing Zero Trust for the Hybrid Enterprise.<sup>1</sup> Those labs were in turn based on a SANS blog post by Jason Ostrom,<sup>2</sup> and uses Jason's PurpleCloud tool.<sup>3</sup> Jason has continued to do great work </p>"},{"location":"info/#more-on-service-principal-abuse","title":"More on Service Principal Abuse","text":"<p>For further reading on service principal abuse pathways, check out the excellent research authored by Andy Robbins<sup>4</sup> and Dirk-jan Mollema<sup>5</sup>.</p>"},{"location":"info/#sec530-defensible-security-architecture-and-engineering-implementing-zero-trust-for-the-hybrid-enterprise","title":"SEC530: Defensible Security Architecture and Engineering: Implementing Zero Trust for the Hybrid Enterprise","text":"<p>Course Description</p> <p>This course is designed to help students build and maintain a truly defensible security architecture, while taking them on a journey towards implementing Zero Trust principles, pillars and capabilities. There will be a heavy focus on leveraging current infrastructure and investment. Students will learn how to assess, re-configure and validate existing technologies to significantly improve their organizations' prevention, detection and response capabilities, augment visibility, reduce attack surface, and even anticipate attacks in innovative ways. The course will also delve into some of the latest technologies and their capabilities, strengths, and weaknesses. You will come away with recommendations and suggestions that will aid in building a robust security infrastructure, layer by layer, across hybrid environments, as you embark on a journey towards Zero Trust.<sup>1</sup></p> <ol> <li> <p>SANS Institute. (n.d.) SEC530: Defensible Security Architecture and Engineering: Implementing Zero Trust for the Hybrid Enterprise. SANS. Retrieved May 18, 2024 from https://www.sans.org/cyber-security-courses/defensible-security-architecture-and-engineering/.\u00a0\u21a9\u21a9</p> </li> <li> <p>Ostrom, Jason. (2021, June 3). Build, Hack, and Defend Azure Identity - An Introduction to PurpleCloud Hybrid + Identity Cyber Range PurpleCloud is a Hybrid + Identity Cyber Security Range built for Azure Cloud with automated deployment scripts. SANS. Retrieved May 18, 2024 from https://www.sans.org/blog/build-hack-defend-azure-identity/.\u00a0\u21a9</p> </li> <li> <p>Ostrom, Jason. (2024, February 18; commit ec010a6a8b0979f2b63e909b3662ce557cc57615). PurpleCloud. Retrieved May 18, 2024 from https://github.com/iknowjason/PurpleCloud.\u00a0\u21a9</p> </li> <li> <p>Robbins, Andy. (2021, October 12). Azure Privilege Escalation via Service Principal Abuse. Medium. Retrieved May 18, 2024 from https://posts.specterops.io/azure-privilege-escalation-via-service-principal-abuse-210ae2be2a5 \u21a9</p> </li> <li> <p>Mollema, Dirk-jan. (2019, September 16). Azure AD privilege escalation - Taking over default application permissions as Application Admin. Retrieved May 18, 2024 from https://dirkjanm.io/azure-ad-privilege-escalation-application-admin \u21a9</p> </li> </ol>"},{"location":"a1/sec530.bonus.a1/","title":"Azure Account Setup","text":""},{"location":"a1/sec530.bonus.a1/#objectives","title":"Objectives","text":"<ul> <li>Prepare an Azure account and subscription to use for the labs.</li> <li>Create a workbook to keep notes throughout the labs, starting with recording your subscription and tenant IDs.</li> </ul>"},{"location":"a1/sec530.bonus.a1/#introduction","title":"Introduction","text":"<p>In this lab, we'll get ready for our exploration by making sure that you have a valid Azure account and subscription to use for the rest of the labs.</p> <p>An Azure account is associated with an email address and includes contact information and billing details.<sup>1</sup></p> <p>A subscription is an agreement with Microsoft to use one or more Microsoft cloud platforms or services, for which charges accrue based on either a per-user license fee or on cloud-based resource consumption.<sup>2</sup> All Azure resources are associated with one and only one subscription, which in turn is associated with one and only one account.<sup>1</sup> Without a subscription you won't be able to access the Azure cloud services!</p> <p>A Microsoft Entra ID tenant is a reserved Microsoft Entra ID service instance that an organization receives and owns once it signs up for a Microsoft cloud service such as Azure, Microsoft Intune, or Microsoft 365. Each tenant represents an organization, and is distinct and separate from other Microsoft Entra ID tenants.<sup>3</sup></p>"},{"location":"a1/sec530.bonus.a1/#lab-preparation","title":"Lab Preparation","text":"<p>If you're reading these instructions from the online electronic workbook (EWB), then you're connected to the Internet and able to browse the Web - so you should be ready to go!</p>"},{"location":"a1/sec530.bonus.a1/#step-by-step-instructions","title":"Step-by-Step Instructions","text":"1. Decide: Create or Re-Use Account? 2. Create an Azure Account 3. Use an Existing Azure Account 4. Decide: Create or Re-Use Subscription? 5. Create an Azure Subscription 6. Use an Existing Azure Subscription 7. Open Azure-Notes Workbook 8. Record Subscription and Tenant IDs"},{"location":"a1/sec530.bonus.a1/#1-decide-create-or-re-use-account","title":"1. Decide: Create or Re-Use Account?","text":"<p>Completing the workshop labs requires that you have an active Microsft Azure account. To create a new Azure account, you'll need an email address that isn't already associated with an Azure account, and to follow instructions to set up an Azure account for that email address.</p> <p>However, Microsoft Azure is one of the most common cloud platforms that we will encounter<sup>4</sup> and you may already have an Azure account. You can use that account if:</p> <ul> <li> <p>You are able to create, configure, and tear down an Azure subscription in that Azure account.</p> <p>This requires that you have the Owner or Contributor role for the account.</p> </li> <li> <p>You are willing to create, configure, and tear down an Azure subscription in that Azure account.</p> <p>You may not want to be making changes like this to an Azure account used for production purposes -- or you might just be paranoid about making a mistake!</p> </li> <li> <p>You are okay with the potential fees associated with using Azure resources in your existing Azure account.</p> <p>New Azure accounts receive a Free Trial subscription with a $200 USD credit to use in the first 30 days, which is more than enough for this lab. If you use an existing Azure account and have exhausted your credit or are past the first 30 days, then you may incur some fees!</p> <p>During testing, the fees to execute these labs over the period of one week were under $0.50 (50 cents) USD.</p> </li> </ul> <p>Pick an option:</p> <ul> <li> <p>To create a new Azure Account, then move on to task 2. Create an Azure Account.</p> </li> <li> <p>To use an existing Azure account, then jump to task 3. Use an Existing Azure Account.</p> </li> </ul>"},{"location":"a1/sec530.bonus.a1/#2-create-an-azure-account","title":"2. Create an Azure Account","text":"<p>Follow these steps to create a new Azure account for these labs.</p> <p>If you instead wanted to use an existing Azure account, then jump to task 3. Use an Existing Azure Account.</p> <p>Watch Out for Fees!</p> <p>New Azure accounts receive a Free Trial subscription with a $200 USD credit to use in the first 30 days, which is more than enough for this lab. But be mindful of fees that you may incur after the Free Trial subscription expires!</p> <ol> <li> <p>Browse to https://portal.azure.com.</p> <p>URL</p> <pre><code>https://portal.azure.com\n</code></pre> </li> <li> <p>If you are already logged into a Microsoft account, then you will be redirected to the Azure portal home page.</p> <p>Click on the account name near the top-right corner of the web page, and then click on the Sign in with a different account link.</p> <p></p> </li> <li> <p>If you have previously logged into a Microsoft account from this browser, then you will be presented with a Pick an account dialog.</p> <p>Click on the Use another account option.</p> <p></p> </li> <li> <p>You will be presented with a Sign in dialog.  Click on the Create one! link.</p> <p></p> </li> <li> <p>You will be presented with a Create account dialog and prompted to enter an email address.</p> <p>Enter an email address that is not already associated with an Azure account, and then click on the Next command button.</p> <p></p> Dots in Gmail Addresses <p>If your Gmail address is already associated with an Azure account, then you can register a new Azure account with a variant of your Gmail address by inserting one or more period characters inside the email address.</p> <p>An Internet email address or 'addr-spec' consists of a 'local-part' (e.g., mailbox name), followed by an '@' symbol, followed by a domain.<sup>5</sup> For example: 'help@gmail.com' consists of a local-part of 'help' and a domain of 'gmail.com'.</p> <p>Gmail completely ignores any and all period characters inside the local-part.<sup>6</sup> For example, email sent to the following email addresses will all be delivered to the same Gmail account:</p> <pre><code>help@gmail.com\nhe.lp@gmail.com\nh.e.l.p@gmail.com\n</code></pre> <p>However, most web services - including Microsoft's Azure account registration - treat these as separate email addresses for purposes of registration and account management.</p> <p>For example, if you already have an Azure account associated with 'help@gmail.com', then you can create a new Azure account associated with 'he.lp@gmail.com'.</p> <p>One downside of this technique: Microsoft may not grant the \"$200 for the first 30 days\" credit to new accounts that (ab)use this feature.</p> Getting a New @outlook.com or @hotmail.com Email Address <p>You can also click on the Get a new email address link to get a new @outlook.com or @hotmail.com email address. That option requires a registration and verification process that is not covered in these instructions.</p> </li> <li> <p>You will be presented with a Create a password dialog and prompted to enter a new password.</p> <p>Enter a strong password or (better yet) passphrase, and click on the Next command button.</p> <p></p> Strong Passwords and Passphrases <p>As of 2024-05-15, this dialog's strong password requirements were:</p> <p>Passwords must have at least 8 characters and contain at least two of the following: uppercase letters, lowercase letters, numbers, and symbols.</p> <p>We strongly recommend using a strong but easy to guess passphrase, in the form of a sentence that readily meets these requirements but is easy to remember. The dialog does accept spaces and punctuation as special characters, so using a sentence is supported.</p> </li> <li> <p>You may be presented with a What's your name? dialog and prompted to submit your first and last name. Enter your information and click on the Next command button.</p> <p></p> </li> <li> <p>You will be presented with a What's your birthdate? dialog and prompted to submit your country/region and birthdate. Enter your information and click on the Next command button.</p> <p></p> </li> <li> <p>You will be presented with a Verify email dialog, and a confirmation email will be sent to your email address.</p> <p>Enter the security code from the confirmation email.</p> <p>Uncheck the check box to receive \"information, tips, and offers about Microsoft products and services.\"</p> <p>Click on the Next command button.</p> <p></p> </li> <li> <p>You will be presented with a puzzle that you must complete to verify you are not a robot. Follow the instructions to complete the puzzle.</p> </li> <li> <p>If you have previously logged into a Microsoft account from this browser, then you will be presented with a Pick an account dialog. Click on the account that you just created.</p> <p></p> </li> <li> <p>You will be presented with the Azure portal home page, with a 'Welcome to Azure' message and an option to 'get started'. Click on the Cancel command button.</p> <p></p> </li> </ol> <p>Congratulations! You just created an Azure account!</p> <p>Now jump to task 5. Create an Azure Subscription.</p>"},{"location":"a1/sec530.bonus.a1/#3-use-an-existing-azure-account","title":"3. Use an Existing Azure Account","text":"<p>Follow these steps to login to an existing Azure account.</p> <p>If you instead wanted to create a new Azure account, then jump back to task 2. Create an Azure Account.</p> <p>Watch Out for Fees!</p> <p>New Azure accounts receive a Free Trial subscription with a $200 USD credit to use in the first 30 days, which is more than enough for this lab. If you use an existing Azure account and have exhausted your credit or are past the first 30 days, then you may incur some fees!</p> <p>During testing, the fees to execute these labs over the period of one week were under $0.50 (50 cents) USD.</p> <p>Before you can login to your existing Azure account, you'll need to collect your Azure account authentication information. For purposes of illustration, we're assuming that you can authenticate using just your email address and password.</p> <ol> <li> <p>Once you acquire your Azure account credentials, you need to login! Open a web browser and browse to the Azure portal at https://portal.azure.com.</p> <p>URL</p> <pre><code>https://portal.azure.com\n</code></pre> </li> <li> <p>If you are already logged into a Microsoft account, then you will be redirected to the Azure portal home page.</p> <p>Click on the account name near the top-right corner of the web page, and then click on the Sign in with a different account link.</p> <p></p> </li> <li> <p>If you have previously logged into a Microsoft account from this browser, then you will be presented with a Pick an account dialog.</p> <p>Click on the Use another account option.</p> <p></p> </li> <li> <p>You will be presented with a Sign in dialog.  Enter your Azure account email address and click on the Next command button.</p> <p></p> </li> <li> <p>You will be presented with an Enter password dialog.  Enter your password and click on the Sign in command button.</p> <p></p> </li> <li> <p>If you are prompted by the browser to \"Save password?\" then click on the Save command button.</p> <p></p> </li> <li> <p>If you are presented with a Stay signed in? dialog, then check the Don't show this again dialog and click on the Yes command button.</p> <p></p> </li> <li> <p>You will be redirected to the Azure portal home page. If you are presented with a 'Welcome to Azure' message and an option to 'get started', then click on the Cancel command button.</p> <p></p> </li> <li> <p>Now you need to confirm that this account is assigned the Global Administrator role. Start by accessing the Azure portal's information on your Microsoft Entra ID environment.</p> <p>Click on the search bar at the top of the page, enter the text 'microsoft entra id', and select the Microsoft Entra ID service from the drop-down.</p> <p>Search Text</p> <pre><code>microsoft entra id\n</code></pre> <p></p> </li> <li> <p>The Default Directory page will open. Click on the Roles and admininstrators option in the left-hand pane.</p> <p></p> </li> <li> <p>The Roles and administrators page will open. You should see that your account has the role of Global Administrator.</p> <p></p> </li> </ol> <p>If your account does not have the role of Global Administrator, then you will probably need to jump back to task 2. Create an Azure Account and create a new Azure account.</p> <p>Congratulations! You have logged into your Azure account!</p> <p>This task probably wasn't that challenging -- but it is the foundation upon which the rest of our work in Azure will be built!\"</p> <p>Now move on to task 4. Decide: Create or Re-Use Subscription?.</p>"},{"location":"a1/sec530.bonus.a1/#4-decide-create-or-re-use-subscription","title":"4. Decide: Create or Re-Use Subscription?","text":"<p>If you used an existing Azure account, then you'll probably still want to create a new subscription so that the resources for these labs are separate from your existing Azure resources. But who knows - maybe you like to live dangerously!</p> <p>Pick an option:</p> <ul> <li> <p>To create a new Azure subscription, then move onto task 5. Create an Azure Subscription.</p> </li> <li> <p>To use an existing Azure account, then jump to task 6. Use an Existing Azure Subscription.</p> </li> </ul>"},{"location":"a1/sec530.bonus.a1/#5-create-an-azure-subscription","title":"5. Create an Azure Subscription","text":"<p>Your next task is to create an active Azure subscription for your account!</p> <p>If you instead wanted to use an existing Azure subscription, then jump to task 6. Use an Existing Azure Subscription.</p> <p>At this point you should be logged into and viewing the Azure portal home page (https://portal.azure.com).</p> <ol> <li> <p>Click on the search bar at the top of the page, enter the text 'subscriptions', and select the Subscriptions service from the drop-down.</p> <p>Search Text</p> <pre><code>subscriptions\n</code></pre> <p></p> </li> <li> <p>The Subscriptions page will open. Click on the Add option.</p> <p></p> </li> <li> <p>If a 'select an offer for your subscription' prompt appears on the right hand side of the page, click on the Start free command button.</p> <p></p> </li> <li> <p>Your browser may be redirected and require you to pick an account for login.  If you have multiple Azure accounts, be sure to select the correct account.</p> <p></p> </li> <li> <p>You will be presented with a series of pages to Create your Azure free account. This process will require you to input your name, full mailing address, email address, phone number and credit card. Follow all directions and complete all information.</p> <p>Some useful notes:</p> <ul> <li> <p>Phone Number Verification is required, via text message or a voice call.</p> </li> <li> <p>You must agree to the Customer agreement.</p> </li> <li> <p>You do not have to agree to let Microsoft share your information with partners.</p> </li> <li> <p>Credit card information is used for identity verification and will not be charged during the free credit trial.</p> <p>Watch out for Fees!</p> <p>If you continue using Azure with this account after the 30-day trial, then you may incur fees!</p> Virtual Credit Card Numbers <p>Some credit card issuers allow you to generate 'virtual' card number associated with your primary account, often with features such as an earlier expiration date than your primary card number, a lower credit limit than your primary card number, and association with a single merchant so that the card number can't be stolen and re-used at another merchant. You may want to check wheter your credit card issuer provides this service, and use a virtual card number here.</p> Azure Cost Monitoring <p>Azure allows you to monitor cost and usage of your Azure account, including receiving alerts when costs exceed a user-defined threshold.<sup>7</sup></p> </li> <li> <p>Decline technical support if you are prompted to add it to your subscription</p> </li> <li> <p>At the end of the subscription registration process, you may be prompted for final verification and/or to select your Azure account again.</p> </li> <li> <p>When the subscription registration is complete, your browser will be redirected to an Azure Quickstart Center page.</p> <p></p> </li> </ul> </li> <li> <p>Click on the search bar at the top of the page, enter the text 'subscriptions', and select the Subscriptions service from the drop-down.</p> <p>Search Text</p> <pre><code>subscriptions\n</code></pre> <p></p> </li> <li> <p>On the Azure portal's Subscriptions page, you should see the new subscription with a title similar to 'Azure Subscription 1', and a status of 'Active'.</p> <p></p> </li> </ol> <p>Congratulations! You now have an active Azure subscription!</p> <p>Now jump to task 7. Open Azure-Notes Workbook.</p>"},{"location":"a1/sec530.bonus.a1/#6-use-an-existing-azure-subscription","title":"6. Use an Existing Azure Subscription","text":"<p>This task guides you through finding your existing subscription.</p> <p>If you instead wanted to create a new Azure subscription, then jump back to task 5. Create an Azure Subscription.</p> <p>At this point you should be logged into and viewing the Azure portal home page (https://portal.azure.com).</p> <ol> <li> <p>Click on the search bar at the top of the page, enter the text 'subscriptions', and select the Subscriptions service from the drop-down.</p> <p>Search Text</p> <pre><code>subscriptions\n</code></pre> <p></p> </li> <li> <p>On the Azure portal's Subscriptions page, you should see at least one subscription with a long hexadecimal Subscription ID and a Status of 'Active'.</p> <p></p> <p>If you see more than one active subscription, then you'll need to drill into each of those subscriptions to identify which subscription you want to use.</p> <p>Make note of the desired subscription name and ID!</p> </li> </ol> <p>Now move on to task 7. Open Azure-Notes Workbook.</p>"},{"location":"a1/sec530.bonus.a1/#7-open-azure-notes-workbook","title":"7. Open Azure-Notes Workbook","text":"<p>This series of labs references a Microsoft Excel workbook that you use to record information about your Azure account and environment. The workbook is available online as a read-only document, so you'll want to make a copy in your own Microsoft account's OneDrive.</p> <p>At this point you should be logged into the Azure portal and viewing the Subscriptions page (https://portal.azure.com/#blade/Microsoft_Azure_Billing/SubscriptionsBlade).</p> <ol> <li> <p>In the same browser you are using to access the Azure portal, open a new tab.</p> </li> <li> <p>In the new tab, browse to https://bit.ly/azure-notes2.</p> <p>URL</p> <pre><code>https://bit.ly/azure-notes2\n</code></pre> </li> <li> <p>The authentication to the Azure portal and Microsoft Excel online are independent, so you will be prompted to authenticate to your Microsoft account.</p> <p>Complete the authentication prompts, including answering 'Yes' on the Stay signed in? dialog.</p> </li> <li> <p>The <code>Azure-Notes.xlsx</code> workbook will open in the web browser.</p> <p></p> </li> <li> <p>Before working with the workbook, double-check to make sure that you are accessing Microsoft Excel online with the correct Microsoft account.</p> <p>Click on the user initials near the top-right corner of the web application window. The displayed email address should match the email address associated with your Azure account.</p> <p>If it does, then click on the user initials again.</p> <p></p> If the displayed email address does not match the email address associated with your Azure account, then: <ul> <li>Click on the Sign out link.</li> <li>Close the browser tab in which Microsoft Excel online was opened.</li> <li>Go back to this task's step 1.</li> </ul> </li> <li> <p>Now let's create a copy of the Azure-Notes workbook that you can edit.</p> <p>Click on the Edit a copy button, near the top-right corner of the web application window.</p> <p></p> <p>A copy of the workbook will be saved to your Microsoft account's OneDrive. After a minute, the window will refresh to allow you to work with that copy of the workbook.</p> <p>If the window doesn't refresh after a minute, then simply refresh your browser window.</p> </li> </ol> Conserving Screen Real Estate <p>You may find it easier to work with the workbook by changing Microsoft Excel online's Show Ribbon option to Automatically Hide.</p> <p></p> <p>You can reveal the ribbon by hovering hte mouse pointer over the user initials near the top-right of the web application window.</p>"},{"location":"a1/sec530.bonus.a1/#8-record-subscription-and-tenant-ids","title":"8. Record Subscription and Tenant IDs","text":"<p>We'll need the subscription's subscription ID and tenant ID in later labs, so let's take a moment now to save those values in the Azure-Notes workbook.</p> <ol> <li> <p>Switch back to the browser tab accessing the Azure portal's Subscriptions page. On that page, find the subscription that you are using for this workshop and click on the associated Subscription name to view the subscriptioion details.</p> <p></p> </li> <li> <p>On the subscription details web page, hover the mouse pointer to the right of the Subscription ID value, and click on the 'copy' icon.</p> <p></p> </li> <li> <p>Switch to the Azure-Notes workbook, and paste the subscription ID into the appropriate Azure Property Value cell.</p> <p></p> </li> <li> <p>We also want to save the tenant ID. Switch back to the Azure portal browser tab. </p> <p>Click on the search bar at the top of the page, enter the text 'tenant', and select the Tenant properties service from the drop-down.</p> <p>Search Text</p> <pre><code>tenant\n</code></pre> <p></p> <p>This will open the Tenant Properties page.</p> </li> <li> <p>Find the Tenant ID field, hover the mouse pointer to the right of the tenant ID value, and click on the 'copy' icon.</p> <p></p> </li> <li> <p>Switch to the Azure-Notes workbook, and paste the tenant ID into the appropriate Azure Property Value cell.</p> <p></p> </li> </ol> <p>Congratulations and nice work! You have successfully completed all the tasks in this lab, and are ready for the remaining Azure labs.</p>"},{"location":"a1/sec530.bonus.a1/#conclusion","title":"Conclusion","text":"<p>In this lab, you either:</p> <ul> <li> <p>created an Azure account and subscription; or</p> </li> <li> <p>logged into an existing account and either:</p> <ul> <li>created an Azure subscription;</li> <li>or verified that you can access an existing subscription.</li> </ul> </li> </ul> <p>You then saved a copy of a Microsoft Excel workbook in your OneDrive storage, and updated it with your Azure subscription ID and tenant ID.</p> <p>In the next Azure lab, you'll leverage your subscription by creating and using Azure resources!</p> <ol> <li> <p>Microsoft. (2023, October 09). Azure fundamental concepts. Microsoft Learn. Retrieved May 18, 2024 from https://learn.microsoft.com/en-us/azure/cloud-adoption-framework/ready/considerations/fundamental-concepts.\u00a0\u21a9\u21a9</p> </li> <li> <p>Microsoft. (2023, October 20) Subscriptions, licenses, accounts, and tenants for Microsoft's cloud offerings. Microsoft Learn. Retrieved May 18, 2024 from https://learn.microsoft.com/en-us/microsoft-365/enterprise/subscriptions-licenses-accounts-and-tenants-for-microsoft-cloud-offerings?view=o365-worldwide.\u00a0\u21a9</p> </li> <li> <p>Microsoft. (2023, December 21). Create an Azure Active Directory tenant to use with Power BI. Microsoft Learn. Retrieved May 18, 2024 from https://learn.microsoft.com/en-us/power-bi/developer/embedded/create-an-azure-active-directory-tenant.\u00a0\u21a9</p> </li> <li> <p>Megaport. (2022, November 8). AWS, Azure, and google cloud: The big three compared. Megaport. Retrieved May 18, 2024 from https://www.megaport.com/blog/aws-azure-google-cloud-the-big-three-compared/.\u00a0\u21a9</p> </li> <li> <p>Resnick, P. (2001, April). Internet Message Format. IETF Datatracker. Retrieved May 18, 2024, from https://datatracker.ietf.org/doc/html/rfc2822#section-3.4.1.\u00a0\u21a9</p> </li> <li> <p>Google. (n.d.). Dots don\u2019t matter in Gmail addresses - gmail help. Google. Retrieved May 18, 2024 from https://support.google.com/mail/answer/7436150?hl=en#:~:text=If%20someone%20accidentally%20adds%20dots,john.smith%40gmail.com.\u00a0\u21a9</p> </li> <li> <p>Microsoft. (2024, April 7). Azure monitor cost and usage. Microsoft Learn. Retrieved May 18, 2024 from https://learn.microsoft.com/en-us/azure/azure-monitor/cost-usage.\u00a0\u21a9</p> </li> </ol>"},{"location":"a2/sec530.bonus.a2/","title":"Azure Environment Setup","text":""},{"location":"a2/sec530.bonus.a2/#objectives","title":"Objectives","text":"<ul> <li>Create an Azure service principal with the permissions needed to manage your Microsoft Entra ID environment.</li> <li>Prepare a terminal session with the variables needed to execute the Terraform client.</li> <li>Execute a PurpleCloud script to create Terraform configuration files for your planned Microsoft Entra ID environment.</li> <li>Execute Terraform to create the Microsoft Entra ID environment.</li> </ul>"},{"location":"a2/sec530.bonus.a2/#introduction","title":"Introduction","text":"<p>Remember, your assigned task is to replicate the developers' Microsoft Entra ID environment, evaluate it for security weaknesses, and report on what you've found. Your next step - now that you have an Azure account and subscription ready to use - is to replicate Tyrell Corp's production Microsoft Entra ID environment.</p> <p>After some hands-on investigation and discussions with some of the developers, you identified some key attributes of the production Entra ID environment:</p> <ul> <li> <p>There are about a dozen Microsoft Entra ID applications and about one hundred users. The applications provide a range of services across HR, Accounting, IT operations, and other functional areas.</p> </li> <li> <p>Muliple applications have an associated service principal that are granted the the Privileged Role Administrator (PRA) role, and one application has a service principal that is granted the Global Administrator role.</p> </li> <li> <p>At least one user has been granted the Application Administrator role.</p> </li> </ul> <p>Several of these attributes are of concern from a security perspective!</p> <ul> <li> <p>An Application Administrator holds special privileges, including the ability to manage enterprise applications and application registrations, and to reset credentials or client secrets for any application's service principal.<sup>1</sup></p> <p>If an attacker can control this role and identify an application that has a service principal assigned a higher-privileged role, then they can obtain access to that higher-privileged role.</p> </li> <li> <p>A PRA can reset credentials and manage assignment of all Microsoft Entra ID roles including the Global Administrator role<sup>2</sup>.</p> <p>This is a prime target for an attacker attempting to perform privilege escalation. If an attacker obtains this role, then they could become Global Administrator.</p> </li> <li> <p>A Global Administrator has the ability to create and manage a new subscription, and access to all administrative features within the subscription's associated tenant.<sup>3</sup><sup>,</sup><sup>4</sup><sup>,</sup><sup>5</sup></p> <p>This role is 'the keys to the kingdom' -- If an attacker obtains this role, then they control the subscription's tenant!</p> </li> </ul> <p>This information indicates a potential security issue upon which to focus our attention. If an attacker could find a way to obtain the Application Administrator role, then they could reset the credentials or client secrets for a service principal that is granted the PRA role. Once an attacker has the PRA role, then they could elevate their privileges to Global Administrator.</p> <p>Our new goal, then, is to execute that attack path as a practical illustration of the security risks in Tyrell Corp's current Microsoft Entra ID environment.</p> <p>However, creating the test Microsoft Entra ID environment by hand would be extremely time-consuming, tedious, and error-prone. So we'll use the PurpleCloud<sup>7</sup><sup>,</sup><sup>8</sup> tool to generate lists of semi-random Entra ID applications and users as stand-ins for Tyrell Corp's fictitious Entra ID environment. PurpleCloud will also generate Terraform configuration files representing those applications and users. Then we'll use a Terraform client to generate the test environment from those configuration files.</p>"},{"location":"a2/sec530.bonus.a2/#lab-preparation","title":"Lab Preparation","text":"<p>Before starting this lab, you must have already completed the Azure Account Setup lab.</p> <p>Current State</p> <p>At this point, you should:</p> <ul> <li> <p>Have an Azure account and subscription identified to use for the rest of the labs.</p> </li> <li> <p>Be logged into https://portal.azure.com with your Azure account.</p> </li> <li> <p>Have your own copy of the Azure-Notes workbook open, with your Azure subscription and tenant IDs recorded.</p> </li> </ul>"},{"location":"a2/sec530.bonus.a2/#step-by-step-instructions","title":"Step-by-Step Instructions","text":"1. Start Azure Cloud Shell Session - bash 2. Prepare az for Use 3. Create a Service Principal 4. Assign Service Principal Permissions 5. Install PurpleCloud 6. Obtain Microsoft Entra ID Domain Name 7. Execute PurpleCloud Script 8. Set Terraform Terminal Environment 9. Execute Terraform"},{"location":"a2/sec530.bonus.a2/#1-start-azure-cloud-shell-session-bash","title":"1. Start Azure Cloud Shell Session - bash","text":"<p>While some of the Azure environment setup can be readily performed via the Azure portal, other parts can be done more efficiently using the Azure command-line interface (Azure CLI). The Azure command-line interface (Azure CLI) is a set of commands used to create and manage Azure resources. The Azure CLI is available across Azure services and is designed to get you working quickly with Azure, with an emphasis on automation. <sup>9</sup></p> <p>The simplest way to access the Azure CLI is to use the Azure Cloud Shell service. Azure Cloud Shell is a really nice shell environment that you can access from a browser and allows you to easily perform tasks with your Azure account. The Cloud Shell obviates the need for an external VM or tools to access a shell in your cloud environment. You can perform file management such as storing, uploading, and downloading files. It offers either a PowerShell or bash shell environment.<sup>10</sup></p> If You Are Using an Existing Azure Account <p>If you are using an existing Azure Azure account, instead of creating an account for this workshop, then the presented prompts and dialogs may slightly differ from those presented below.</p> <ol> <li> <p>Switch back to the browser tab accessing the Azure portal https://portal.azure.com.</p> </li> <li> <p>Click on the Cloud Shell icon at the top of the page, immediately to the right of the search bar.</p> <p></p> </li> <li> <p>You will be presented with a \"Welcome to Azure Cloud Shell\" prompt, and given the option to select either Bash or PowerShell. Click on the Bash option.</p> <p></p> Picking a Shell <p>Azure Cloud Shell allows you to switch between bash and PowerShell at any time. We'll use bash for this lab, and check out PowerShell in a later lab.</p> </li> <li> <p>You will be presented with a \"Getting started\" prompt.</p> <ul> <li>Click on the Mount storage account** radio button.</li> <li>Click on the Subscription dropdown and select the subscription you are using for these labs.</li> <li>Click on the Apply command button.</li> </ul> <p></p> </li> <li> <p>You will be presented with a \"Mount storage account\" prompt.</p> <ul> <li>Click on the We will create a storage account for you radio button.</li> <li>Click on the Next command button.</li> </ul> <p></p> <p>This step is important because it  allows your environment to run bash commands using the Azure CLI tool (referred to as 'az')<sup>11</sup>, and to maintain persistent storage between Cloud Shell sessions.</p> <p>After a few minutes, the bottom half of your web browser tab will display a bash terminal prompt.</p> <p></p> <p>The standard Azure Cloud Shell prompt includes the account user name, and so will be different than the prompt in the screenshot above.</p> </li> <li> <p>Let's make the terminal output slightly more readable by changing the terminal prompt, to remove host name and add a line-break before the prompt. Execute the following command:</p> <p>Cloud Shell bash Input</p> <pre><code>PS1='\\n\\[\\e[1;32m\\][ \\[\\e[0m\\]\\w\\[\\e[1;32m\\] ]$ \\[\\e[0m\\]'\n</code></pre> Copy and Paste with the Cloud Shell Terminal <p>The Cloud Shell terminal is running inside of a web browser, and the shortcut keys that you're used to might not work as you expect.</p> <p>To paste content into the terminal, right-click in the terminal window and select Paste from the context menu.</p> <p>To copy content from the terminal window, click and drag to select text, right-click to activate the context menu, and select Copy from the context menu.</p> <p>When pasting a command into a Cloud Shell bash terminal, you may need to press the Enter key again after pasting the command.</p> <p>Your output should be similar to the following:</p> <p>Cloud Shell bash Output</p> <pre><code>sec530-labs-azure-sec530-labs-xp [ ~ ]$ PS1='\\n\\[\\e[1;32m\\][ \\[\\e[0m\\]\\w\\[\\e[1;32m\\] ]$ \\[\\e[0m\\]'\n\n[ ~ ]$\n</code></pre> <p>This will stay in effect for the duration of this Cloud Shell session.</p> Restoring the Shell Prompt <p>If you decide that you'd prefer to use the original shell prompt, then you can execute the following command:</p> <p>Cloud Shell bash Input</p> <pre><code>PS1='\\[\\e[1;32m\\]\\u [ \\[\\e[0m\\]\\w\\[\\e[1;32m\\] ]$ \\[\\e[0m\\]'\n</code></pre> <p>You could also simply exit and restart your Cloud Shell session -- but note that any changes to the shell environment, including setting other environment variables, will be have to be redone!</p> Permanently Changing the Shell Prompt <p>If you wanted to change the shell prompt permanently, then you could edit your Cloud Shell <code>.bashrc</code> file to add the command above, or to replace the existing command that sets the PS1 environment variable.</p> Maximizing the Shell <p>You can maximize the shell by clicking on the 'maximize' icon near the top-right of the terminal window.</p> <p></p> </li> </ol> Your Cloud Shell is now ready to use. <p>You used the Azure Cloud Shell service to start a bash shell, and configured an associated storage provider so that you have persistent storage between Cloud Shell sessions.</p>"},{"location":"a2/sec530.bonus.a2/#2-prepare-az-for-use","title":"2. Prepare az for Use","text":"<p>Now that we have a bash shell started, let's configure the environment for the az commands that we're going to run.</p> <ol> <li> <p>We need to set the active subscription used by the az command, so that any az commands default to referencing that subscription when creating or managing any resources.</p> <p>First get a list of available subscriptions by executing the following command:</p> <p>Cloud Shell bash Input</p> <pre><code>az account list\n</code></pre> <p>Your output should be similar to the sample output below. In particular, you should see one subscription listed, with the subscription ID listed in the 'id' property value and the tenant ID listed in the 'tenantId' property value.</p> <p>Cloud Shell bash Output</p> <pre><code>[ ~ ]$ az account list\n[\n  {\n    \"cloudName\": \"AzureCloud\",\n    \"homeTenantId\": \"f6edcda7-02bc-4daa-972d-15567f6e3bb6\",\n    \"id\": \"7551c4d0-3cab-4286-a39d-f3964ecd9191\",\n    \"isDefault\": true,\n    \"managedByTenants\": [],\n    \"name\": \"sans-dev-student-79e4d10cee7f\",\n    \"state\": \"Enabled\",\n    \"tenantId\": \"f6edcda7-02bc-4daa-972d-15567f6e3bb6\",\n    \"user\": {\n      \"cloudShellID\": true,\n      \"name\": \"sec530-labs-azure-sec530-labs-xphsi@sansdevstudent79e4d10cee7f.onmicrosoft.com\",\n      \"type\": \"user\"\n    }\n  }\n]\n\n[ ~ ]$\n</code></pre> <p>The names and IDs of your Azure account, tenant, and subscription will be different from the screenshots and sample output in these step-by-step instructions.</p> If You Are Using an Existing Azure Account <p>If you are using an existing Azure Azure account, instead of creating an account for this workshop, then you may see multiple subscriptions. Make sure that you identify the correct subscription that you want to use.</p> To see just specific ID values... <p>Execute the following commands:</p> <p>Cloud Shell bash Input</p> <pre><code>az account list | jq '.[0].id' -r\n</code></pre> <pre><code>az account list | jq '.[0].tenantId' -r\n</code></pre> <p>Your output should be similar to the following:</p> <p>Cloud Shell bash Ouput</p> <pre><code>[ ~ ]$ az account list | jq '.[0].id' -r\n7551c4d0-3cab-4286-a39d-f3964ecd9191\n\n[ ~ ]$ az account list | jq '.[0].tenantId' -r\nf6edcda7-02bc-4daa-972d-15567f6e3bb6\n\n[ ~ ]$\n</code></pre> </li> <li> <p>So that we can reference the subscription and tenant IDs in later commands, we'll save these values in bash environment variables. But before you do that, take a moment to compare the displayed subscription and tenant IDs to those that you recorded in your Azure-Notes workbook.</p> <ul> <li> <p>If the displayed subscription and tenant IDs do match those you previously recorded:</p> Then do this... <p>Execute the following commands:</p> <p>Cloud Shell bash Input</p> <pre><code>subscriptionId=\"$(az account list --query \"[?isDefault].id\" -o tsv)\"\n</code></pre> <pre><code>tenantId=\"$(az account list --query \"[?isDefault].tenantId\" -o tsv)\"\n</code></pre> <pre><code>echo ${subscriptionId}\n</code></pre> <pre><code>echo ${tenantId}\n</code></pre> <p>Your output should be similar to the following:</p> <p>Cloud Shell bash Output</p> <pre><code>[ ~ ]$ subscriptionId=$(az account list --query \"[?isDefault].id\" -o tsv)\n\n[ ~ ]$ tenantId=$(az account list --query \"[?isDefault].tenantId\" -o tsv)\n\n[ ~ ]$ echo ${subscriptionId}\n7551c4d0-3cab-4286-a39d-f3964ecd9191\n\n[ ~ ]$ echo ${tenantId}\nf6edcda7-02bc-4daa-972d-15567f6e3bb6\n\n[ ~ ]$\n</code></pre> </li> <li> <p>If the displayed subscription and tenant IDs do not match those you previously recorded:</p> <p>Double-check to make sure you're comparison is correct and that you do in fact have the correct subscription ID and tenant ID recorded. If you're certain...</p> Then do this... <p>The Azure-Notes workbook contains some cells with calculated values to make it easier for you to retrieve and set environment variables in the future. Since you populated the subscription ID and tenant ID values, you can:</p> <ol> <li> <p>Copy the contents of cells H3:H4.</p> <p></p> </li> <li> <p>Paste the copied cells to your Cloud Shell terminal window.</p> <p>Your output should be similar to the following:</p> <p>Cloud Shell bash Output</p> <pre><code>[ ~ ]$ subscriptionId='7551c4d0-3cab-4286-a39d-f3964ecd9191'\ntenantId='83f4ed17-d5cf-4660-afdc-c4ee2513366c'\n\n[ ~ ]$\n</code></pre> </li> <li> <p>Execute the commands below to validate that the environment variables are set.</p> <p>Cloud Shell bash Input</p> <pre><code>echo ${subscriptionId}\n</code></pre> <pre><code>echo ${tenantId}\n</code></pre> <p>Your output should be similar to the following:</p> <p>Cloud Shell bash Output</p> <pre><code>[ ~ ]$ echo ${subscriptionId}\n7551c4d0-3cab-4286-a39d-f3964ecd9191\n\n[ ~ ]$ echo ${tenantId}\nf6edcda7-02bc-4daa-972d-15567f6e3bb6\n\n[ ~ ]$\n</code></pre> </li> </ol> <p>Since we're specifying a subscription ID that is different than the current active subscription, let's set the active subscription for subsequent az commands.</p> <p>Execute the following commands:</p> <p>Cloud Shell bash Input</p> <pre><code>az account set --subscription=\"${subscriptionId}\"\n</code></pre> <pre><code>az account list --query \"[?isDefault]\"\n</code></pre> <p>Your output should be similar to the sample output below. In particular, note that the 'id' property value matches the subscription ID that you intend to use, and that the 'isDefault' property value is 'true'.</p> <p>Cloud Shell bash Output</p> <pre><code>[ ~ ]$ az account set --subscription=\"${subscriptionId}\"\n\n[ ~ ]$ az account list --query \"[?isDefault]\"\n[\n{\n    \"cloudName\": \"AzureCloud\",\n    \"homeTenantId\": \"f6edcda7-02bc-4daa-972d-15567f6e3bb6\",\n    \"id\": \"7551c4d0-3cab-4286-a39d-f3964ecd9191\",\n    \"isDefault\": true,\n    \"managedByTenants\": [],\n    \"name\": \"sans-dev-student-79e4d10cee7f\",\n    \"state\": \"Enabled\",\n    \"tenantId\": \"f6edcda7-02bc-4daa-972d-15567f6e3bb6\",\n    \"user\": {\n    \"cloudShellID\": true,\n    \"name\": \"sec530-labs-azure-sec530-labs-xphsi@sansdevstudent79e4d10cee7f.onmicrosoft.com\",\n    \"type\": \"user\"\n    }\n}\n]\n\n[ ~ ]$\n</code></pre> To see just the 'id' and 'isDefault' property values...... <p>Execute the following commands:</p> <p>Cloud Shell bash Input</p> <pre><code>az account list --query \"[?isDefault]\" | jq '.[0].id' -r\n</code></pre> <pre><code>az account list --query \"[?isDefault]\" | jq '.[0].isDefault' -r\n</code></pre> <p>Your output should be similar to the following:</p> <p>Cloud Shell bash Output</p> <pre><code>[ ~ ]$ az account list --query \"[?isDefault]\" | jq '.[0].id' -r\n7551c4d0-3cab-4286-a39d-f3964ecd9191\n\n[ ~ ]$ az account list --query \"[?isDefault]\" | jq '.[0].isDefault' -r\ntrue\n\n[ ~ ]$\n</code></pre> </li> </ul> Working With Azure Subscriptions <p>See the Microsoft web page How to manage Azure subscriptions with the Azure CLI<sup>12</sup> for additional information on using az to work with Azure subscriptions.</p> </li> </ol> The bash shell environment is now ready for use with our az commands. <p>Checking (and setting, if necessary) the active subscription ensures that subsequent az commands will default to the correct subscription.</p> <p>Setting environment variables for the subscription and tenantIds allows us to use those environment variables in future commands, which will save time and minimize potential errors.</p>"},{"location":"a2/sec530.bonus.a2/#3-create-a-service-principal","title":"3. Create a Service Principal","text":"<ol> <li> <p>Now we need to create a new application and associated service principal for use with Azure role-based access control (Azure RBAC). Azure RBAC helps you manage who has access to Azure resources, what they can do with those resources, and what areas they have access to.<sup>13</sup></p> But I already created the SP-Attack Application and Service Principal! <p>If you are revisiting this lab and have already created the SP-Attack application and service principal, then you can retrieve information about the existing application with the following command:</p> <p>Cloud Shell bash Input</p> <pre><code>az ad app list --query \"[?displayName=='SP-Attack']\"\n</code></pre> <p>From that output, you can retrieve the application ID.</p> <p>If you lost the associated service principal's password, then you could reset the associated service principal password with the following command:</p> <p>Cloud Shell bash Input</p> <pre><code>az ad sp credential reset --id YOUR_APPLICATION_ID\n</code></pre> Deleting the SP-Attack Application <p>And if you really want to start this lab from scratch, you can delete the existing SP-Attack application and service principal with the following command:</p> <p>Cloud Shell bash Input</p> <pre><code>az ad app delete --id YOUR_APPLICATION_ID\n</code></pre> <p>We want the service principal to have a role of 'Owner', scoped to your active subscription, with a name of 'SP-Attack'. Execute the following command:</p> <p>Cloud Shell bash Input</p> <pre><code>az ad sp create-for-rbac --role=\"Owner\" --scopes=\"/subscriptions/${subscriptionId}\" --name \"SP-Attack\"\n</code></pre> <p>Your output should be similar to the following:</p> <p>Cloud Shell bash Output</p> <pre><code>[ ~ ]$ az ad sp create-for-rbac --role=\"Owner\" --scopes=\"/subscriptions/${subscriptionId}\" --name \"SP-Attack\"\nCreating 'Owner' role assignment under scope '/subscriptions/7551c4d0-3cab-4286-a39d-f3964ecd9191'\nThe output includes credentials that you must protect. Be sure that you do not include these credentials in your code or check the credentials into your source control. For more information, see https://aka.ms/azadsp-cli\n{\n  \"appId\": \"ddb3c9bd-b976-41a8-9daa-6ad3e973c7b7\",\n  \"displayName\": \"SP-Attack\",\n  \"password\": \"1yT8Q~vP1OyGI~gOm3yvkwWQOhji-rPntKWd6b.u\",\n  \"tenant\": \"f6edcda7-02bc-4daa-972d-15567f6e3bb6\"\n}\n\n[ ~ ]$\n</code></pre> <p>The password is automatically generated by Azure, cannot be retrieved later, and cannot be changed to a user-defined password.</p> <p>If you need to reset the service principal password in the future, then se the tip above.</p> <p>As with the subscription ID and tenantId, the appID and application password can be retrieved and saved in shell environment variables for easy reference and use in later commands.</p> <p>Execute the commands below to save the appId value in a variable and display the contents of the variable.</p> <p>Cloud Shell bash Input</p> <pre><code>appId=$(az ad sp list --query \"[?displayName == 'SP-Attack'].appId\" --all -o tsv)\n</code></pre> <pre><code>echo ${appId}\n</code></pre> <p>Your output should be similar to the following:</p> <p>Cloud Shell bash Output</p> <pre><code>[ ~ ]$ appId=$(az ad sp list --query \"[?displayName == 'SP-Attack'].appId\" --all -o tsv)\n\n[ ~ ]$ echo ${appId}\nddb3c9bd-b976-41a8-9daa-6ad3e973c7b7\n\n[ ~ ]$\n</code></pre> <p>Execute the command below after replacing the placeholder text 'YOUR_SP_PASSWORD' with the password that was provided in the results of the <code>az ad sp create-for-rbac</code> command.</p> <p>Cloud Shell bash Input</p> <pre><code>appPassword='YOUR_SP_PASSWORD'\n</code></pre> <p>Then execute the command below to display the contents of the variable.</p> <p>Cloud Shell bash Input</p> <pre><code>echo ${appPassword}\n</code></pre> <p>Your output should be similar to the following:</p> <p>Cloud Shell bash Output</p> <pre><code>[ ~ ]$ appPassword='1yT8Q~vP1OyGI~gOm3yvkwWQOhji-rPntKWd6b.u'\n\n[ ~ ]$ echo ${appPassword}\n1yT8Q~vP1OyGI~gOm3yvkwWQOhji-rPntKWd6b.u\n\n[ ~ ]$\n</code></pre> <p>Security Warning</p> <p>Saving a plaintext password in an environment variable is not a strong security practice, and not something we'd want to do on a production system!</p> </li> <li> <p>Verify that you can successfully login to Azure with the service principal's password using the <code>az login</code> command.</p> <p>Switch back to the browser tab that contains the Cloud Shell terminal window, and enter the command below.</p> <p>Cloud Shell bash Input</p> <pre><code>az login --service-principal -u ${appId} --tenant ${tenantId} -p ${appPassword}\n</code></pre> <p>Your output should be similar to the sample output below. In particular, the user name value should match the appId value that was returned by the <code>az ad sp create-for-rbac</code> command; and the type should be 'servicePrincipal'.</p> <p>Cloud Shell bash Output</p> <pre><code>[ ~ ]$ az login --service-principal -u ${appId} --tenant ${tenantId} -p ${appPassword}\nCloud Shell is automatically authenticated under the initial account signed-in with. Run 'az login' only if you need to use a different account\n[\n  {\n    \"cloudName\": \"AzureCloud\",\n    \"homeTenantId\": \"f6edcda7-02bc-4daa-972d-15567f6e3bb6\",\n    \"id\": \"7551c4d0-3cab-4286-a39d-f3964ecd9191\",\n    \"isDefault\": true,\n    \"managedByTenants\": [],\n    \"name\": \"sans-dev-student-79e4d10cee7f\",\n    \"state\": \"Enabled\",\n    \"tenantId\": \"f6edcda7-02bc-4daa-972d-15567f6e3bb6\",\n    \"user\": {\n      \"name\": \"ddb3c9bd-b976-41a8-9daa-6ad3e973c7b7\",\n      \"type\": \"servicePrincipal\"\n    }\n  }\n]\n\n[ ~ ]$\n</code></pre> What to do if Your Output States 'A Cloud Shell credential problem occurred' ? <p>If your command output includes text similar to one of the following:</p> <ul> <li> <p>A Cloud Shell credential problem occurred. When you report the issue with the error below, please mention the hostname 'cc-a4b21845-6fd7ffd8f7-lbpr4'</p> </li> <li> <p>AADSTS7000215: Invalid client secret provided. Ensure the secret being sent in the request is the client secret value, not the client secret ID, for a secret added to app 'fc437813-772c-42c0-8b31-019157d4f058'.</p> </li> </ul> <p>... then odds are good that either the appId or appPassword variables are incorrect.</p> To see just specific ID values... <p>Execute the following command:</p> <p>Cloud Shell bash Input</p> <pre><code>az login --service-principal -u ${appId} --tenant ${tenantId} --query \"[].name\" -o tsv -p ${appPassword}\n</code></pre> <p>Your output should be similar to the following, displaying either the subscription ID or subscription name:</p> <p>Cloud Shell bash Output</p> <pre><code>[ ~ ]$ az login --service-principal -u ${appId} --tenant ${tenantId} -o tsv -p ${appPassword} --query \"[].user.name\"\nCloud Shell is automatically authenticated under the initial account signed-in with. Run 'az login' only if you need to use a different account\nddb3c9bd-b976-41a8-9daa-6ad3e973c7b7\n\n[ ~ ]$\n</code></pre> </li> <li> <p>The 'appId' and 'password' values in the output of the  <code>az ad sp create-for-rbac</code> command are vital to later steps and labs, so let's copy those values to our Azure-Notes workbook for later reference.</p> <p>Click and drag to select the application ID value. Then right-click anywhere in the shell to activate a context menu, and select Copy from the context menu.</p> <p></p> <p>Switch to the Azure-Notes workbook, and paste the application ID into the cell for the 'Application ID' value.</p> <p></p> <p>Switch back to the terminal window. Click and drag to select the application password value. Then right-click anywhere in the shell to activate a context menu, and select Copy from the context menu.</p> <p></p> <p>Switch to the Azure-Notes workbook and paste the application password into the cell for the 'Application Password' value.</p> <p></p> <p>Watch Out for Autocorrect!</p> <p>After pasting the password, doublecheck to make sure that Microsoft Excel didn't automatically capitalize the first word of the password. If it did, then edit the text to match the actual password.</p> <p>Security Warning</p> <p>Saving a plaintext password in a file is not a strong security practice, and not something we'd want to do on a production system!</p> </li> <li> <p>We're done with the Cloud Shell terminal for now. Minimize the Cloud Shell terminal window by clicking on the 'minimize' icon near the top-right corner of the terminal window.</p> <p></p> </li> </ol> Congratulations! You have successfully set up the application and service principal! <p>Creating the SP-Attack application and associated service principal will allow us to use that SP-Attack application with Terraform scripts to create users and additional applications -- which allows us to easily stand up and manage our test Azure environment.</p> <p>Setting environment variables for the application ID for the created application, and the password for the associated service principal, allows us to use those environment variables in future commands, which will save time and minimize potential errors.</p> <p>Security Warning</p> <p>Saving a plaintext password in an environment variable or file is not a strong security practice, and not something we'd want to do on a production system!</p>"},{"location":"a2/sec530.bonus.a2/#4-assign-service-principal-permissions","title":"4. Assign Service Principal Permissions","text":"<ol> <li> <p>In the Azure portal, open the App registrations page to find the SP-Attack application.</p> <p>Click on the search bar at the top of the page, enter the text 'app registrations', and select the App registrations service from the drop-down.</p> <p>Search Term</p> <pre><code>app registrations\n</code></pre> <p></p> </li> <li> <p>View the details of the SP-Attack application.</p> <p>On the App registrations page, click on the All applications option to view all created applications, and then click on the icon for the SP-Attack application.</p> <p></p> Retrieving Application Details <p>At this point we're viewing the details of the SP-Attack application. A wealth of useful information can be found on and through this page, including the application ID and tenant ID.</p> </li> <li> <p>We need to change the Graph API permissions to allow the SP-Attack application to make changes to Microsoft Entra ID resources.</p> <p>Access the API permissions page by scrolling down in the quicklinks at the left side of the page, to find and click on the API Permissions link.</p> <p></p> </li> <li> <p>We need to add five different permissions:</p> <p>Graph API Permissions</p> <pre><code>Application.ReadWrite.All\n</code></pre> <pre><code>Directory.ReadWrite.All\n</code></pre> <pre><code>Group.ReadWrite.All\n</code></pre> <pre><code>RoleManagement.ReadWrite.Directory\n</code></pre> <pre><code>User.ReadWrite.All\n</code></pre> <p>It's possible to add them all at once, but the portal interface is a bit easier to navigate if we add them one at a time. Let's start with the Application.ReadWrite.All permission.</p> <ul> <li> <p>Click on Add a permission.</p> <p></p> </li> <li> <p>On the Request API permissions page, click on Microsoft Graph.</p> <p></p> </li> <li> <p>To add the permission:</p> <ul> <li> <p>Click on the Application permissions box.</p> </li> <li> <p>In the Select permissions search box, enter 'application.readwrite.all'.</p> <pre><code>application.readwrite.all\n</code></pre> </li> <li> <p>Click to expand the permissions available for the Application role.</p> </li> <li> <p>Click to enable the checkbox next to the Application.ReadWrite.All permission.</p> </li> <li> <p>Click on the Add permissions command button.</p> </li> </ul> <p></p> </li> </ul> <p>That takes care of the first permission! Now repeat that process for each of the remaining required permissions.</p> </li> <li> <p>After adding permissions, the browser will be returned to the SP-Attack | API permissions page. Added permissions will be listed at the bottom of the page. Verify that all of the following permissions have been successfully added:</p> <ul> <li>Application.ReadWrite.All</li> <li>Directory.ReadWrite.All</li> <li>Group.ReadWrite.All</li> <li>RoleManagement.ReadWrite.Directory</li> <li>User.ReadWrite.All</li> </ul> <p></p> </li> <li> <p>Now that we've added the five permissions, we must grant them consent within the Default Directory of your tenant. By default, admin consent is required.</p> <p>Click on the Grant admin consent link, just above the list of added permissions. When prompted to confirm, click the Yes command button.</p> <p></p> <p>In the list of permissions, scroll to the right to expose the Status column, and confirm that the status is now 'Granted' (with a green check mark) for all five permissions.)</p> <p></p> <p>Note</p> <p>Even after you grant consent, the Grant admin consent option will still be visible. This is normal. Check the Status column to confirm the status of listed permissions.</p> </li> </ol> Congratulations! You have successfully set up the application and service principal! <p>So that the SP-Attack application has the permissions needed to create and manage our test environment's users and applications, we assigned the application's service principal the following permissions (and consent to exercise these permissions throughout the tenant):</p> <ul> <li>Application.ReadWrite.All</li> <li>Directory.ReadWrite.All</li> <li>Group,.ReadWrite.All</li> <li>RoleManagement.ReadWrite.Directory</li> <li>User.ReadWrite.All</li> </ul>"},{"location":"a2/sec530.bonus.a2/#5-install-purplecloud","title":"5. Install PurpleCloud","text":"<p>Now let's install PurpleCloud!</p> <ol> <li> <p>Click on the Cloud Shell icon at the top of the page, immediately to the right of the search bar, to re-open the Cloud Shell bash terminal.</p> <p></p> <p>If you are receive a Cloud Shell disconnected prompt, then click on the Connect command button to reconnect to a Cloud Shell bash terminal.</p> </li> <li> <p>Execute the command below to clone the PurpleCloud GitHub repository to your Cloud Shell bash environment.</p> <p>Cloud Shell bash Input</p> <pre><code>git clone https://github.com/iknowjason/PurpleCloud.git \n</code></pre> <p>Your output should be similar to the following:</p> <p>Cloud Shell bash Output</p> <pre><code>[ ~ ]$ git clone https://github.com/iknowjason/PurpleCloud.git \nCloning into 'PurpleCloud'...\nremote: Enumerating objects: 2185, done.\nremote: Counting objects: 100% (574/574), done.\nremote: Compressing objects: 100% (238/238), done.\nremote: Total 2185 (delta 353), reused 394 (delta 293), pack-reused 1611\nReceiving objects: 100% (2185/2185), 42.36 MiB | 13.28 MiB/s, done.\nResolving deltas: 100% (1162/1162), done.\n\n[ ~ ]$\n</code></pre> </li> <li> <p>Faker is a Python package that generates fake or test data for databases, XML documents, and many other purposes.<sup>6</sup> PurpleCloud uses it to generate semi-random user data.</p> <p>Execute the command below to install the Python Faker. </p> <p>Cloud Shell bash Input</p> <pre><code>pip3 install faker\n</code></pre> <p>Your output should be similar to the following:</p> <p>Cloud Shell bash Output</p> <pre><code>Defaulting to user installation because normal site-packages is not writeable\nCollecting faker\nDownloading Faker-25.2.0-py3-none-any.whl.metadata (15 kB)\nRequirement already satisfied: python-dateutil&gt;=2.4 in /usr/lib/python3.9/site-packages (from faker) (2.9.0.post0)\nRequirement already satisfied: six&gt;=1.5 in /usr/lib/python3.9/site-packages (from python-dateutil&gt;=2.4-&gt;faker) (1.16.0)\nDownloading Faker-25.2.0-py3-none-any.whl (1.8 MB)\n\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501 1.8/1.8 MB 7.0 MB/s eta 0:00:00\nInstalling collected packages: faker\nWARNING: The script faker is installed in '/home/greg/.local/bin' which is not on PATH.\nConsider adding this directory to PATH or, if you prefer to suppress this warning, use --no-warn-script-location.\nNOTE: The current PATH contains path(s) starting with `~`, which may not be expanded by all applications.\nSuccessfully installed faker-25.2.0\n\n[ ~ ]$\n</code></pre> </li> </ol> <p>PurpleCloud and its dependencies are now installed!</p>"},{"location":"a2/sec530.bonus.a2/#6-obtain-microsoft-entra-id-domain-name","title":"6. Obtain Microsoft Entra ID Domain Name","text":"<p>When executing the PurpleCloud script, we'll need to provide the Microsoft Entra ID environment's primary domain. We can obtain that from the Azure portal.</p> <ol> <li> <p>Access the Azure portal's Microsoft Entra ID service page.</p> <p>Click on the search bar at the top of the page, enter the text 'microsoft entra id', and select the Microsoft Entra ID service from the drop-down.</p> <p>Search Term</p> <pre><code>microsoft entra id\n</code></pre> <p></p> </li> <li> <p>The right-hand pane of the web page will display basic information about your Microsoft Entra ID environment, including your primary domain name.</p> <p></p> </li> <li> <p>Copy the primary domain name from the web page into your clipboard.</p> </li> <li> <p>Switch to the Azure-Notes workbook, and paste the primary domain name into the cell for the 'Primary Domain Name' value.</p> <p></p> <p>PurpleCloud will use the primary domain name as the UPN suffix to create the Microsoft Entra ID environment. This needs to be accurate or the Terraform commands will fail!</p> Using a Custom Domain <p>You can optionally add a custom domain to Microsoft Entra ID and set the custom domain as your primary domain. If you have a custom domain that you would like to add to Microsoft Entra ID and use in this lab, then browse to this<sup>14</sup> official Microsoft link. You would then need to modify the rest of the Azure lab instructions to match your custom domain!</p> </li> <li> <p>We need to save the primary domain name suffix in a bash environment variable so that we can reference it in other commands. The Azure-Notes workbook can help with this, because it contains some cells with calculated values to make it easier for you to retrieve and set environment variables.</p> <p>Switch to the Azure-Notes workbook and copy the contents of cell D8.</p> <p></p> <p>Switch back to the Cloud Shell bash terminal and paste the copied cell contents.</p> <p>Your output should be similar to the following:</p> <p>Cloud Shell bash Output</p> <pre><code>[ ~ ]$ export DOMAIN='sansdevstudent79e4d10cee7f.onmicrosoft.com'\n\n[ ~ ]$\n</code></pre> <p>Execute the command below to validate that the environment variable is set.</p> <p>Cloud Shell bash Input</p> <pre><code>echo ${DOMAIN}\n</code></pre> <p>Your output should be similar to the following:</p> <p>Cloud Shell bash Output</p> <pre><code>[ ~ ]$ echo ${DOMAIN}\nsansdevstudent79e4d10cee7f.onmicrosoft.com\n\n[ ~ ]$\n</code></pre> </li> </ol> <p>You now have the Microsoft Entra ID domain name information saved in a bash environment variable and your Azure-Notes workbook.</p>"},{"location":"a2/sec530.bonus.a2/#7-execute-purplecloud-script","title":"7. Execute PurpleCloud Script","text":"<p>Now let's run a PurpleCloud script to generate Terraform files!</p> <p>PurpleCloud uses Python templates to generate Terraform files, which can then be used by Terraform to provision an Microsoft Entra ID environment. PurpleCloud is an incredible time saver versus  manually editing Terraform files. For example, we can dynamically generate hundreds or thousands of Microsoft Entra ID users and assign them to Microsoft Entra ID groups.</p> <ol> <li> <p>Create the directory <code>~/azure</code> and make that your working direectory, so that the PurpleCloud script's output files are stored there.</p> <p>Cloud Shell bash Input</p> <pre><code>cd ~/azure\n</code></pre> <pre><code>cd ~/azure\n</code></pre> <p>Your output should be:</p> <p>Cloud Shell bash Output</p> <pre><code>[ ~ ] $ cd ~/azure\n\n[ ~/azure ]$\n</code></pre> </li> <li> <p>Now execute the PurpleCloud script:</p> <p>Cloud Shell bash Input</p> <pre><code>python3 ~/PurpleCloud/generators/azure_ad/azure_ad.py -c 25 --upn ${DOMAIN} --apps 7 -aa -ga -pra\n</code></pre> <p>Your output should be similar to the following:</p> <p>Cloud Shell bash Output</p> <p></p> <pre><code>[ ~/azure ]$ python3 ~/PurpleCloud/generators/azure_ad/azure_ad.py -c 25 --upn sansdevstudent79e4d10cee7f.onmicrosoft.com --apps 7 -aa -ga -pra\n[+] Number of users desired:  25\n[+] upn suffix:  sansdevstudent79e4d10cee7f.onmicrosoft.com\n[+] Desired applications enabled:   7\n[+] Creating unique user list\n[+] Number of users added into list:  25\n[+] Number of duplicate users filtered out:  0\n[+] Creating output files for Azure AD Users\n    [+] Users csv file:  azure_users.csv\n    [+] Username txt file:  azure_usernames.txt\n    [+] Email addresses txt file:  azure_emails.txt\n    [+] Terraform file:  users.tf\n[+] Creating terraform file:  apps.tf\n    [+] Assigning the Privileged Role Administrator to Marketing_Application\n    [+] Assigning the Global Administrator role to ITOps_Application\n[+] Azure AD User assigned into Application Administrator role\n    [+] Username: benjaminwaters\n    [+] Display Name: Benjamin Waters\n\n[ ~/azure ]$\n</code></pre> <p>PurpleCloud Script Details</p> <p>Let's dig into this command (i.e., the script arguments) a bit to understand what it's doing.</p> <ul> <li><code>python3 /labs/purplecloud/generators/azure_ad/azure_ad.py</code> : Use the Python3 interpreter to execute the script at <code>/labs/purplecloud/generators/azure_ad/azure_ad.py</code>.</li> <li><code>-c 25</code> : Generate Terraform code representing 25 users with semi-random names.</li> <li><code>-upn ${DOMAIN}</code> : Give the users a UPN suffix of the domain saved in the DOMAIN environment variable (which we set in the previous lab step).</li> <li><code>--aps 7</code> : Generate Terraform code representing 7 Microsoft Entra ID applications (i.e., application registrations) and associated service principals.</li> <li><code>-aa</code> : Assign an Application Administrator role to one of the 25 Microsoft Entra ID users, at random.</li> <li><code>-ga</code> : Assign the Global Administrator role to one of the 7 application's service principal, at random.</li> <li><code>-pra</code> : Assign the Privileged Role Administrator role to one of the other 7 application's service principal, at random.</li> </ul> <p>These options were chosen to emulate our hypothetical Tyrell Corp Microsoft Entra ID environment, as described in this lab's Introduction.</p> <p>Note that in the script output above, we highlighted the following lines:</p> <ul> <li> <p>The name of the application that was assigned the Privileged Role Administrator (PRA) role: Marketing_Application</p> </li> <li> <p>The name of the application that was assigned the Global Administrator role: ITOps_Application</p> </li> <li> <p>The name of the Microsoft Entra ID user that was assigned the Application Administrator role: benjaminwaters</p> </li> </ul> </li> <li> <p>We'll want to reference that key information later, so let's save it to our Azure-Notes workbook.</p> <p>Click and drag to select the name of the application assigned the Privileged Role Administrator (PRA) role. Then right-click on the text to activate a context menu, and select Copy from the context menu.</p> <p></p> <p>Switch to the Azure-Notes workbook, and paste the username into the cell for the 'PRA Application' value.</p> <p></p> <p>Repeat the above process to copy and paste the Global Administrator Application and the Application Admin Userame.</p> <p></p> </li> <li> <p>Note that the script identified multiple \"output files for Azure AD users.\"</p> <p>Cloud Shell bash Output</p> <pre><code>[+] Creating output files for Azure AD Users\n    [+] Users csv file:  azure_users.csv\n    [+] Username txt file:  azure_usernames.txt\n    [+] Email addresses txt file:  azure_emails.txt\n    [+] Terraform file:  users.tf\n</code></pre> <p>Execute the following command to list these files, confirming that the files were created in the current directory:</p> <p>Cloud Shell bash Input</p> <pre><code>ls -1 azure* users*\n</code></pre> <p>Your output should be similar to the following:</p> <p>Cloud Shell bash Output</p> <pre><code>[ ~/azure ]$ ls -1 azure* users*\nazure_emails.txt\nazure_usernames.txt\nazure_users.csv\nusers.tf\n\n[ ~/azure ]$\n</code></pre> <p>Let's take a quick look at the first few lines of the <code>azure_*</code> files. Execute the following command:</p> <p>Cloud Shell bash Input</p> <pre><code>head -n 3 azure_*\n</code></pre> <p>Your output should be similar to the following:</p> <p>Cloud Shell bash Output</p> <pre><code>[ ~/azure ]$ head -n 3 azure*\n==&gt; azure_emails.txt &lt;==\njustinbanks@sansdevstudent79e4d10cee7f.onmicrosoft.com\nalexisblair@sansdevstudent79e4d10cee7f.onmicrosoft.com\nkylefoley@sansdevstudent79e4d10cee7f.onmicrosoft.com\n\n==&gt; azure_usernames.txt &lt;==\njustinbanks\nalexisblair\nkylefoley\n\n==&gt; azure_users.csv &lt;==\nJustin Banks,justinbanks,justinbanks@sansdevstudent79e4d10cee7f.onmicrosoft.com\nAlexis Blair,alexisblair,alexisblair@sansdevstudent79e4d10cee7f.onmicrosoft.com\nKyle Foley,kylefoley,kylefoley@sansdevstudent79e4d10cee7f.onmicrosoft.com\n\n[ ~/azure ]$\n</code></pre> <p>The individual names and email addresses in your output will probably be different than the sample output, but note the following:</p> <ul> <li> <p>The names seems like they could be real user names - but are in fact semi-randomly generated by Python Faker<sup>6</sup> randomly joining names from a list of first and last names.</p> </li> <li> <p>Information for each user is listed on the same line of each file (e.g., Justin Banks is on the first line of each file).</p> </li> <li> <p>The UPN matches your Microsoft Entra ID primary domain name (i.e., the one that you have saved in the DOMAIN environment variable and specified on the script's command line).</p> </li> </ul> <p>The <code>users.tf</code> file will be used as Terraform instructions. Execute the following command to see an example of its contents:</p> <p>Cloud Shell bash Input</p> <pre><code>tail -n 17 users.tf\n</code></pre> <p>Your output should be similar to the following:</p> <p>Cloud Shell bash Output</p> <pre><code>[ ~/azure ]$ tail -n 17 users.tf\nresource \"azuread_user\" \"user25\" {\n  user_principal_name = \"chelseawatson@${var.upn_suffix}\"\n  display_name        = \"Chelsea Watson\"\n  mail_nickname       = \"chelseawatson\"\n  password            = local.creds\n}\n\n# Activate the Application administrator directory role\nresource \"azuread_directory_role\" \"application_admin\" {\n  display_name = \"Application administrator\"\n}\n\n# Assign Application administrator to a random user\nresource \"azuread_directory_role_assignment\" \"assign_application_admin\" {\n  role_id   = azuread_directory_role.application_admin.object_id\n  principal_object_id = azuread_user.user9.object_id\n}\n\n[ ~/azure ]$\n</code></pre> <p>Note the following:</p> <ul> <li> <p>user25 is defined as a resource object with properties that will become attributes of an 'azuread_user' (i.e., Microsoft Entra ID user) object. If you were to look at the full contents of <code>users.tf</code>, then you would see this holds true for all 25 users.</p> </li> <li> <p>One of the users (user9 in the sample output abvoe) has been randomly assigned the Application Administrator role. This matches up with the following script output:</p> <p>Cloud Shell bash Output</p> <pre><code>[+] Azure AD User assigned into Application Administrator role\n    [+] Username: benjaminwaters\n    [+] Display Name: Benjamin Waters\n</code></pre> <p>You can validate this by searching your <code>users.tf</code> for the name listed in your PurpleCloud script output. For example, if the user identified in your output were 'user9', then you could execute the following command:</p> <p>Cloud Shell bash Input</p> <pre><code>grep -A 1 'user9' users.tf\n</code></pre> <p>Would generate output similar to the following:</p> <p>Cloud Shell bash Output</p> <pre><code>[ ~/azure ]$ grep -A 1 'user9' users.tf\nresource \"azuread_user\" \"user9\" {\n  user_principal_name = \"benjaminwaters@${var.upn_suffix}\"\n--\n  principal_object_id = azuread_user.user9.object_id\n}\n\n[ ~/azure ]$\n</code></pre> </li> </ul> </li> <li> <p>Note that the script identified an additional <code>apps.tf</code> Terraform file.</p> <p>Cloud Shell bash Output</p> <pre><code>[+] Creating terraform file:  apps.tf\n    [+] Assigning the Privileged Role Administrator to Marketing_Application\n    [+] Assigning the Global Administrator role to ITOps_Application\n</code></pre> <p>Execute the following command to list this file, confirming that the file was created in the current directory:</p> <p>Cloud Shell bash Input</p> <pre><code>ls apps.tf\n</code></pre> <p>Your output should be similar to the following:</p> <p>Cloud Shell bash Output</p> <pre><code>[ ~/azure ]$ ls apps.tf\napps.tf\n\n[ ~/azure ]$\n</code></pre> <p>Let's take a quick look at the first few lines of this file. Execute the following command:</p> <p>Cloud Shell bash Input</p> <pre><code>head -n 12 apps.tf\n</code></pre> <p>Your output should be similar to the following:</p> <p>Cloud Shell bash Output</p> <pre><code>[ ~/azure ]$ head -n 12 apps.tf\n\n# Create application\n  resource \"azuread_application\" \"HR_Application\" {\n  display_name = \"${var.upn_suffix} HR-App\"\n}\n\n# Create service principal\n  resource \"azuread_service_principal\" \"SP_HR_Application\" {\n  application_id = azuread_application.HR_Application.application_id\n\n  depends_on = [azuread_application.HR_Application]\n}\n\n[ ~/azure ]$\n</code></pre> <p>The specific application identified in your output may be different than the sample output, but note how an application and associated service principal are identified. If you were to look at the full contents of <code>apps.tf</code>, then you would see this is the same for all 7 applications.</p> <p>Now execute the following command to see the last few lines of the <code>apps.tf</code> file:</p> <p>Cloud Shell bash Input</p> <pre><code>tail -n 5 apps.tf\n</code></pre> <p>Your output should be similar to the following:</p> <p>Cloud Shell bash Output</p> <pre><code>[ ~/azure ]$ tail -n 5 apps.tf\n  # Assign GA to a random SP\n  resource \"azuread_directory_role_assignment\" \"assign_ga\" {\n  role_id   = azuread_directory_role.ga.object_id\n  principal_object_id = azuread_service_principal.SP_ITOps_Application.object_id\n}\n\n[ ~/azure ]$\n</code></pre> <p>This illustrates how the PurpleCloud script creates Terraform instructions to assign a role to a service principal.</p> </li> </ol> <p>Congratulations! You have used PurpleCloud to generate Terraform scripts that represent the Microsoft Entra ID environment!</p>"},{"location":"a2/sec530.bonus.a2/#8-set-terraform-terminal-environment","title":"8. Set Terraform Terminal Environment","text":"<p>Terraform is an infrastructure as code (IaC) tool that lets you define both cloud and on-prem resources in human-readable configuration files that you can version, reuse, and share; and then manage the infrastructure throughout its lifecycle.<sup>15</sup> We'll use Terraform to manager our Microsoft Entra ID lab environment, including tracking the state of the remote resources and tearing down the environment when we're finished.</p> <p>The Terraform client is already installed in the Cloud Shell bash environment. But before we can run the client we need to create some bash environment variables. These variables are needed by the Terraform client to access our Microsoft Entra ID resources via the Hashicorp Azure Active Directory Provider<sup>16</sup>, which leverages the Azure Resource Manager<sup>17</sup>.</p> <p>The environment variables will contain the values of your subscription ID, tenant ID, application ID, and application password. The Azure property values map to the Terraform environment variables as follows:</p> Azure Information Terraform Environment Variable Subscription ID ARM_SUBSCRIPTION_ID Tenant ID ARM_TENANT_ID Application ID ARM_CLIENT_ID Application Password ARM_CLIENT_SECRET <p>Conveniently, you saved these values in your Azure-Notes workbook!</p> <ol> <li> <p>Execute the following steps to set the ARM_SUBSCRIPTION_ID environment variable:</p> <ol> <li> <p>Switch to your terminal and enter the following command (but do not press Enter):</p> <p>Cloud Shell bash Input</p> <pre><code>export ARM_SUBSCRIPTION_ID='YOUR_SUBSCRIPTION_ID'\n</code></pre> </li> <li> <p>Switch to your Azure-Notes workbook. Find the subscription ID value, and copy it to the clipboard.</p> </li> <li> <p>Switch to the terminal window and replace the 'YOUR_SUBSCRIPTION_ID' placeholder text with the copied subscription ID.</p> <p>Make sure to maintain the opening and closing quotes!</p> </li> <li> <p>Press Enter to execute the command.</p> <p>Your output should be similar to the following:</p> <p>Cloud Shell bash Output</p> <pre><code>[ ~/azure ]$ export ARM_SUBSCRIPTION_ID='7551c4d0-3cab-4286-a39d-f3964ecd9191'\n\n[ ~/azure ]$\n</code></pre> </li> <li> <p>Execute the command below to display the contents of the environment variable.</p> <p>Cloud Shell bash Input</p> <pre><code>echo ${ARM_SUBSCRIPTION_ID}\n</code></pre> <p>Your output should be similar to the following:</p> <p>Cloud Shell bash Output</p> <pre><code>[ ~/azure ]$ echo ${ARM_SUBSCRIPTION_ID}\n7551c4d0-3cab-4286-a39d-f3964ecd9191\n\n[ ~/azure ]$\n</code></pre> </li> </ol> </li> <li> <p>Let's take advantage of the Azure-Notes to more easily set the remaining Terraform environment variables.</p> <ol> <li> <p>Copy the contents of cells D3:D6 (which includes the subscription ID that you already set manually).</p> <p></p> </li> <li> <p>Paste the copied cells to your Cloud Shell bash terminal.</p> <p>Your output should be similar to the following:</p> <p>Cloud Shell bash Output</p> <pre><code>[ ~/azure ]$ export ARM_SUBSCRIPTION_ID='7551c4d0-3cab-4286-a39d-f3964ecd9191'\n\n[ ~/azure ]$ export ARM_TENANT_ID='f6edcda7-02bc-4daa-972d-15567f6e3bb6'\n\n[ ~/azure ]$ export ARM_CLIENT_ID='9d14c1fa-b223-4c9e-a1f1-e298fecf237d'\n\n[ ~/azure ]$ export ARM_CLIENT_SECRET='T.08Q~D5qSUe6lr94AoHLKABh1iJqNS2XunP4a2y'\n\n[ ~/azure ]$\n</code></pre> </li> </ol> </li> <li> <p>As a final check, execute the commands below to echo the contents of all four environment variables to your terminal.</p> <p>Cloud Shell bash Input</p> <pre><code>echo ${ARM_SUBSCRIPTION_ID}\n</code></pre> <pre><code>echo ${ARM_TENANT_ID}\n</code></pre> <pre><code>echo ${ARM_CLIENT_ID}\n</code></pre> <pre><code>echo ${ARM_CLIENT_SECRET}\n</code></pre> <p>Your output should be similar to the following:</p> <p>Cloud Shell bash Output</p> <pre><code>[ ~/azure ]$ echo ${ARM_SUBSCRIPTION_ID}\n7551c4d0-3cab-4286-a39d-f3964ecd9191\n\n[ ~/azure ]$ echo ${ARM_TENANT_ID}\nf6edcda7-02bc-4daa-972d-15567f6e3bb6\n\n[ ~/azure ]$ echo ${ARM_CLIENT_ID}\n9d14c1fa-b223-4c9e-a1f1-e298fecf237d\n\n[ ~/azure ]$ echo ${ARM_CLIENT_SECRET}\nT.08Q~D5qSUe6lr94AoHLKABh1iJqNS2XunP4a2y\n\n[ ~/azure ]$\n</code></pre> <p>Validate the output above against your subscription ID, tenant ID, application ID, and application password!</p> </li> </ol> <p>The bash environment variables needed by Terraform are now set.</p>"},{"location":"a2/sec530.bonus.a2/#9-execute-terraform","title":"9. Execute Terraform","text":"<p>Now that we have both the Terraform configuration files (generated by PurpleCloud) and the necessary bash environment variables (set in the previous task), we can run the Terraform client to generate our test Microsoft Entra ID environment.</p> <ol> <li> <p>Let's double-check to make sure those variables are present, by executing the following command</p> <p>Cloud Shell bash Input</p> <pre><code>env | grep ARM | sort | tr '=' '\\t' | column -t\n</code></pre> <p>Your output should be similar to the following (but with different actual environment variable values):</p> <p>Cloud Shell bash Output</p> <pre><code>[~/azure]$ env | grep ARM | sort | tr '=' '\\t' | column -t\nARM_CLIENT_ID        9d14c1fa-b223-4c9e-a1f1-e298fecf237d\nARM_CLIENT_SECRET    T.08Q~D5qSUe6lr94AoHLKABh1iJqNS2XunP4a2y\nARM_SUBSCRIPTION_ID  7551c4d0-3cab-4286-a39d-f3964ecd9191\nARM_TENANT_ID        f6edcda7-02bc-4daa-972d-15567f6e3bb6\n\n[~/azure]$\n</code></pre> <p>If your output doesn't list the variables, or the values don't match your application ID, application password, subscription ID, and tenant ID, then you might be in the wrong terminal window; or you might need to revisit task 8. Set Terraform Terminal Environment.</p> </li> <li> <p>Now let's execute <code>terraform init</code> to tell Terraform to initialize the modules and providers configured in the Terraform code.</p> <p>Execute the following commands:</p> <p>Cloud Shell bash Input</p> <pre><code>cd ~/azure\n</code></pre> <pre><code>terraform init\n</code></pre> <p>Your output should match the following, including the 'Terraform has been successfully initialized!' message:</p> <p>Cloud Shell bash Output</p> <pre><code>[~/azure]$ terraform init\n\nInitializing the backend...\n\nInitializing provider plugins...\n- Finding latest version of hashicorp/azuread...\n- Finding latest version of hashicorp/random...\n- Installing hashicorp/azuread v2.41.0...\n- Installed hashicorp/azuread v2.41.0 (signed by HashiCorp)\n- Installing hashicorp/random v3.5.1...\n- Installed hashicorp/random v3.5.1 (signed by HashiCorp)\n\nTerraform has created a lock file .terraform.lock.hcl to record the provider\nselections it made above. Include this file in your version control repository\nso that Terraform can guarantee to make the same selections by default when\nyou run \"terraform init\" in the future.\n\nTerraform has been successfully initialized!\n\nYou may now begin working with Terraform. Try running \"terraform plan\" to see\nany changes that are required for your infrastructure. All Terraform commands\nshould now work.\n\nIf you ever set or change modules or backend configuration for Terraform,\nrerun this command to reinitialize your working directory. If you forget, other\ncommands will detect it and remind you to do so if necessary.\n\n[~/azure]$\n</code></pre> </li> <li> <p>Now execute <code>terraform apply</code>, to tell Terraform to apply the configuration represented by the current directory's <code>*.tf</code> files.</p> <p>Execute the following commands:</p> <p>Cloud Shell bash Input</p> <pre><code>terraform apply\n</code></pre> <p>This command will generate over a thousand lines of output, detailing the configuration that the Terraform client is going to apply. Don't worry, you don't need to review it all for this lab!</p> <p>You can safely ignore any warnings about deprecated attributes, arguments, or resources.</p> <p>The last of the output will match the following:</p> <p>Cloud Shell bash Output</p> <p><pre><code>Plan: 47 to add, 0 to change, 0 to destroy.\n</code></pre> [...] <pre><code>Changes to Outputs:\n  + azure_ad_details = (known after apply)\n\nDo you want to perform these actions?\n  Terraform will perform the actions described above.\n  Only 'yes' will be accepted to approve.\n\n  Enter a value:\n</code></pre></p> <p>Confirm that the output states the plan is to add 47 items, change 0, and destroy 0.</p> <p>Then enter 'yes' and press the Enter key.</p> <p>Again, a huge amount of output will scroll by -- but we're primarily interested in the last few lines, including the 'Apply complete!' and 'Azure AD Password lines:</p> <p>Cloud Shell bash Output</p> <pre><code>Apply complete! Resources: 47 added, 0 changed, 0 destroyed.\n\nOutputs:\n\nazure_ad_details = &lt;&lt;EOT\n\n------------------------------------\nAzure AD Security Lab Setup Complete\n------------------------------------\nAzure AD Password: amusing-parakeet-hSbg\n\n\nEOT\n\n[~/azure]$\n</code></pre> <p>You can safely ignore any warnings about deprecated attributes, arguments, or resources.</p> <p>Make sure that your output includes <code>Apply complete! Resources: 47 added, 0 changed, 0 destroyed.</code></p> </li> <li> <p>Also make sure to look at the <code>Azure AD Password</code> text. The password displayed is randomly generated by Terraform and has been applied to all of the generated Microsoft Entra ID users accounts.</p> <p>You'll need to know this password in a later lab, so save that information to your Azure-Notes workbook for later reference.</p> <p>Click and drag to select the password. Then right-click on the text to activate a context menu, and select Copy from the context menu.</p> <p></p> <p>Switch to the Azure-Notes workbook and paste the password into the cell for the 'Random User Password' value.</p> <p></p> <p>Watch Out for Autocorrect!</p> <p>After pasting the password, doublecheck to make sure that Microsoft Excel didn't automatically capitalize the first word of the password. If it did, then edit the text to match the actual password.</p> <p>Security Warning</p> <p>Saving a plaintext password in a file is not a strong security practice, and not something we'd want to do on a production system!</p> Retrieving the Random Password <p> <p>At any point you can return to this working directory and retrieve the password with either these commands:</p> <p>Cloud Shell bash Input</p> <pre><code>cd ~/azure\n</code></pre> <pre><code>grep '\"password\":' terraform.tfstate | sort -u\n</code></pre> <p>Which will generate output similar to the following:</p> <p>Cloud Shell bash Output</p> <pre><code>[ ~ ]$ cd ~/azure\n\n[ ~/azure ]$ grep '\"password\":' terraform.tfstate | sort -u\n\"password\": \"amusing-parakeet-hSbg\",\n\n[ ~/azure ]$\n</code></pre> <p>Or these commands:</p> <p>Cloud Shell bash Input</p> <pre><code>cd ~/student/azure\n</code></pre> <pre><code>terraform output\n</code></pre> <p>Which will generate output similar to the following:</p> <p>Cloud Shell bash Output</p> <pre><code>[~]$ cd ~/student/azure\n\n[~/azure]$ terraform output\nazure_ad_details = &lt;&lt;EOT\n\n------------------------------------\nAzure AD Security Lab Setup Complete\n------------------------------------\nAzure AD Password: amusing-parakeet-hSbg\n\nEOT\n\n[~/azure]$\n</code></pre> <li> <p>We're done with the Cloud Shell terminal for now. Minimize the Cloud Shell terminal window by clicking on the 'minimize' icon near the top-right corner of the terminal window.</p> <p></p> </li> <li> <p>Let's use the Azure portal to manage our Microsoft Entra ID resources, and confirm that the Microsoft Entra ID users and applications have been created.</p> <p>In the Azure portal, navigate to the Microsoft Entra ID page, and select Users.</p> <p>Search Term</p> <pre><code>microsoft entra id\n</code></pre> <p></p> <p>We can see that the 25 users were in fact created! The user count has increased by 25, and all the created users are listed.</p> <p></p> <p>Note</p> <p>If you're using an Azure account that you just created for this series of labs, then you'll probably see a total of 26 users: The 25 users that we just created, plus your user account.</p> <p>If you're using a pre-existing Azure account, then all we can say for certain is that you have 25 more users than you did a few minutes ago!</p> </li> <li> <p>Let's also check on the applications list.</p> <p>Navigate to the App registrations page, and click on the All applications link.</p> <p>Search Term</p> <pre><code>app registrations\n</code></pre> <p></p> <p>We can see that the 7 new applications were in fact created! The application count has increased by 7, and all the created applications are listed.</p> <p></p> <p>All of the newly created applications will have a Display Name that starts with your primary domain name. This is expected, since the Terraform configuration files didn't specify different display name values.</p> </li> <li> <p>Now navigate to the Enterprise Applications page.</p> <p>Click on the search bar at the top of the page, enter the text 'enterprise applications', and select the Enterprise Applications service from the drop-down.</p> <p>Search Term</p> <pre><code>enterprise applications\n</code></pre> <p></p> <p>This page can be used to manage all of applications available to you, including standard existing Microsoft applications.</p> <p>The list initially has a filter of 'Application type = Enterprise Applications' applied; remove that filter by clicking on the 'x' to the right of the filter. Then enter the first part of your primary domain name (for example, 'sansdevstudent') into the search text bar.</p> <p></p> <p>There will be 7 applications listed, all with a name that starts with your primary domain name.</p> <p></p> <p>These are the service principals created by Terraform, using the configuration files created by PurpleCloud.  These will be used during the next labs to elevate privileges!</p> </li> Alternate Terraform Commands <p>This tip is for informational purposes only. You do not need to execute the commands listed below.</p> <p>In this lab step, we ran <code>terraform init</code> to initialize the modules and providers configured in the terraform code, and then <code>terraform apply</code> to to apply the configuration represented by the current directory's <code>*.tf</code> files.</p> <p>Some Terraform users like to execute an intermediate step, creating a plan file that they can review before applying configuration, or for debugging or troubleshooting purposes. Executing with this intermediate step would use the following commands:</p> <p>Alternate Terraform Commands</p> <pre><code>terraform init\nterraform plan -out run.plan\nterraform apply run.plan\n</code></pre> Congratulations! You have successfully used the Terraform CLI tool to prepare your test Microsoft Entra ID environment!"},{"location":"a2/sec530.bonus.a2/#conclusion","title":"Conclusion","text":"<p>In this lab, you used your Azure account to create Azure resources. You used a PurpleCloud script to quickly create Terraform configuration files representing a lab environment, and then used Terraform automation to quickly stand up that lab environment! Exploring your Microsoft Entra ID tenant via the Azure portal, you were able to verify that the environment was stood up correctly.</p> Using the Azure CLI on Linux <p>During this lab, you used the Azure Cloud Shell service to access a bash shell and execute <code>az</code> commands. The Azure CLI is also available on Linux<sup>18</sup>.</p> <p>If you were to install the Azure CLI on a Linux system and run the <code>az</code> commands from there, then you could eliminate the need to create an SP-Attack service principal, assign it permissions, and export ARM_* environment variables.</p> <p>Instead, you could just use the <code>az login</code> command to authenticate with a Global Administrator account. At that point, Terraform would execute its commands in the context of that account.</p> <p>In the next lab, you'll use PowerShell commands to further explore the environment and identify privilege escalation attack primitives that could allow a Tyrell Corp developer to assume excessive privileges.</p> <ol> <li> <p>Microsoft. (2024, April 29). Azure AD built-in roles: Application Administrator. Microsoft Learn. Retrieved May 18, 2024 from https://docs.microsoft.com/en-us/azure/active-directory/roles/permissions-reference#application-administrator.\u00a0\u21a9</p> </li> <li> <p>Microsoft. (2024, April 29). Azure AD built-in roles: Privileged Role Administrator. Microsoft Learn. Retrieved May 18, 2024 from https://docs.microsoft.com/en-us/azure/active-directory/roles/permissions-reference#privileged-role-administrator.\u00a0\u21a9</p> </li> <li> <p>Microsoft. (2024, March 15). Azure roles, Azure AD roles, and classic subscription administrator roles. Microsoft Learn. Retrieved May 18, 2024 from https://learn.microsoft.com/en-us/azure/role-based-access-control/rbac-and-directory-admin-roles.\u00a0\u21a9</p> </li> <li> <p>Microsoft. (2024, April 29). Azure AD built-in roles. Microsoft Learn. Retrieved May 18, 2024 from https://learn.microsoft.com/en-us/azure/active-directory/roles/permissions-reference.\u00a0\u21a9</p> </li> <li> <p>Microsoft. (2024, April 29). Azure AD built-in roles: Global Administrator. Microsoft Learn. Retrieved May 18, 2024 from https://docs.microsoft.com/en-us/azure/active-directory/roles/permissions-reference#global-administrator.\u00a0\u21a9</p> </li> <li> <p>Faraglia, Daniele. (2024, May 13; commit db5a5ca9ef1dc9450a2a309945a7faa75007febb). faker. Retrieved May 18, 2024 from https://github.com/joke2k/faker.\u00a0\u21a9\u21a9</p> </li> <li> <p>Ostrom, Jason. (2024, February 18; commit ec010a6a8b0979f2b63e909b3662ce557cc57615). PurpleCloud. Retrieved May 16, 2024 from https://github.com/iknowjason/PurpleCloud.\u00a0\u21a9</p> </li> <li> <p>Ostrom, Jason. (n.d.). Overview. Hybrid + Identity Cyber Range. Retrieved May 16, 2024 from https://www.purplecloud.network/.\u00a0\u21a9</p> </li> <li> <p>Microsoft. (n.d.). Azure Command-Line Interface (CLI) documentation. Microsoft Learn. Retrieved May 16, 2024 from https://learn.microsoft.com/en-us/cli/azure/.\u00a0\u21a9</p> </li> <li> <p>Microsoft. (n.d.). Azure Cloud Shell \u2013 browser-based Command Line. Microsoft Azure. Retrieved May 16, 2024 from https://azure.microsoft.com/en-us/get-started/azure-portal/cloud-shell.\u00a0\u21a9</p> </li> <li> <p>Microsoft. (2024, March 7). What is the Azure CLI?. Microsoft Learn. Retrieved May 18, 2024 from https://learn.microsoft.com/en-us/cli/azure/what-is-azure-cli.\u00a0\u21a9</p> </li> <li> <p>Microsoft. (2024, January 18. How to manage Azure subscriptions with the Azure CLI. Microsoft Learn. Retrieved May 18, 2024 from https://learn.microsoft.com/en-us/cli/azure/manage-azure-subscriptions-azure-cli.\u00a0\u21a9</p> </li> <li> <p>Microsoft. (2024, March 12). What is Azure role-based access control (Azure RBAC)?. Microsoft Learn. Retrieved May 18, 2024 from https://learn.microsoft.com/en-us/azure/role-based-access-control/overview.\u00a0\u21a9</p> </li> <li> <p>Microsoft. (2023, November 28). Add your custom domain name using the Azure portal. Microsoft Learn. Retrieved May 18, 2024 from https://learn.microsoft.com/en-us/azure/active-directory/fundamentals/add-custom-domain.\u00a0\u21a9</p> </li> <li> <p>HashiCorp. (n.d.). What is Terraform?. Terraform. Retrieved May 18, 2024 from https://developer.hashicorp.com/terraform/intro.\u00a0\u21a9</p> </li> <li> <p>HashiCorp. (n.d.). Azure Active Directory Provider. Terraform Registry. Retrieved May 18, 2024 from https://registry.terraform.io/providers/hashicorp/azuread/latest/docs?ref=dataroots.ghost.io.\u00a0\u21a9</p> </li> <li> <p>Microsoft. (n.d.) Azure Resource Manager. Microsoft Azure. Retrieved May 18, 2024 from https://azure.microsoft.com/en-us/get-started/azure-portal/resource-manager.\u00a0\u21a9</p> </li> <li> <p>Microsoft. (2023, August 8). Install the Azure CLI on Linux. Microsoft Learn. Retrieved May 18, 2024 from https://learn.microsoft.com/en-us/cli/azure/install-azure-cli-linux?pivots=apt.\u00a0\u21a9</p> </li> </ol>"},{"location":"a3/sec530.bonus.a3/","title":"Azure Manual Reconnaissance","text":"<p>This lab hasn't been released to the workshop yet. But don't worry - We'll get to it later today! </p>"},{"location":"a4/sec530.bonus.a4/","title":"Azure Privilege Escalation","text":"<p>This lab hasn't been released to the workshop yet. But don't worry - We'll get to it later today! </p>"},{"location":"a5/sec530.bonus.a5/","title":"Azure Teardown","text":"<p>This lab hasn't been released to the workshop yet. But don't worry - We'll get to it later today! </p>"}]}